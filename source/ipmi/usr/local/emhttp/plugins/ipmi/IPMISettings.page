Menu="IPMI:1"
Title="Settings"
---
<? require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_settings.php';?>

<link type="text/css" rel="stylesheet" href="/webGui/styles/jquery.switchbutton.css">
<link rel="stylesheet" href="/plugins/ipmi/js/CodeMirror/lib/codemirror.css">
<link rel="stylesheet" href="/plugins/ipmi/js/CodeMirror/addon/hint/show-hint.css">
<style type="text/css">
    .CodeMirror { border: 1px solid #eee; cursor: text; margin-top: 15px; margin-bottom: 10px; }
    .CodeMirror pre.CodeMirror-placeholder { color: #999; }
</style>
<link type="text/css" rel="stylesheet" href="/plugins/ipmi/css/ipmi.css">

<div id="title" style="margin-top: -22px;">
    <span class="left"><img class="icon" src="/plugins/ipmi/icons/sensors.png"> IPMI Settings</span>
    <span class="status" style="margin-top: 50px;margin-left: -200px;">
    <img class="board-img" src=""></span>
    <span class="status" id="notify-status">Event Notification: <?=$seld_status;?> </span>
</div>

<form markdown="1" name="seld_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/ipmi.cfg" />
<input type="hidden" id="COMMAND" name="#command" value="" />

Enable Event Notifications:
: <select id="IPMISELD" name="IPMISELD" size="1" onChange="checkSELD(this.form);" title="Enable event notifications and local system logging for ipmi events">
  <?=mk_option($seld, "disable", "No");?>
  <?=mk_option($seld, "enable", "Yes");?>
  </select>&nbsp;<input id="btnTest" type="button" value="Test" title="send a random sample event to your ipmi hardware">

> Enable IPMI event notifications. IPMI events will be logged in the system log.
>
> System log is monitored and notification event sent based on severity.

Event Polling Time:
: <select id="IPMIPOLL" class="seld-run" name="IPMIPOLL" size="1" title="Amount of time between ipmi event log checks">
  <?=mk_option($seldpoll, '15', '15 sec');?>
  <?=mk_option($seldpoll, '30', '30 sec');?>
  <?=mk_option($seldpoll, '60', '1 min');?>
  <?=mk_option($seldpoll, '180', '3 min');?>
  <?=mk_option($seldpoll, '300', '5 min');?>
  <?=mk_option($seldpoll, '1800', '30 min');?>
  </select>

> Specify how long between checking IPMI event log and adding events to system log.

Enable Network Connection(s):
: <select id="NETWORK" class="seld-run" name="NETWORK" size="1" onChange="checkNETWORK(this.form);"  title="Enable connection to network based ipmi, not necessary for local onboard ipmi">
  <?=mk_option($netsvc, 'disable', 'No');?>
  <?=mk_option($netsvc, 'enable', 'Yes');?>
  </select>

> Enable monitoring of IPMI sensors and events through the network.

<label class="seld-run ipmi-lan">Enable Localhost Connection:</label>
: <select id="LOCAL" class="seld-run ipmi-lan" name="LOCAL" size="1" onChange="checkLOCAL(this.form);" title="Enable localhost connection along with network connections">
  <?=mk_option($local, 'disable', 'No');?>
  <?=mk_option($local, 'enable', 'Yes');?>
  </select>

> Enable monitoring of localhost as well as network servers.
>
> Useful when monitoring local server as well as a backup server or two.

<label class="seld-run ipmi-lan">IP Address(es):</label>
: <input id="IPADDR" type="text" class="seld-run ipmi-lan ipmi-ipaddr" name="IPADDR" maxlength="66" value="<?=$ipaddr;?>" title="IPMI IP address" placeholder="" ><label class='ipmi-lan'><?=$conn;?></label>

> Add up to four different IPMI IP addresses to monitor sensors and events.

<label class="seld-run ipmi-lan">User Name:</label>
: <input id="USER" type="text" class="seld-run ipmi-lan ipmi-user" name="USER" maxlength="40" value="<?=$user;?>" title="username for network access IPMI" placeholder="username for network access" >

> Username for IPMI connections(s).

<label class="seld-run ipmi-lan">Password:</label>
: <input id="PASSWORD" type="password" class="seld-run ipmi-lan ipmi-password" name="PASSWORD" maxlength="40" value="<?=$password;?>" title="password for network access IPMI" placeholder="password for network access" >

> Password for IPMI connection(s).

&nbsp;

<input class="seld-run" type="button" value="Default" onClick="resetDATA(this.form);"><input type="button" value="Reset BMC" id="bmc-reset" title="do a warm reset of the BMC">
: <input id="btnApply" type="submit" value="Apply" onClick="verifyDATA(this.form)"><input type="button" value="Done" onClick="done()">
</form>

> Default button resets form.
>
> Reset BMC button performs a warm reset of the BMC

<div id="title"><span class="left"><img class="icon" src="/plugins/ipmi/icons/mb.png"> Display Settings</span></div>

<form markdown="1" name="ignore_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/ipmi.cfg" />

<input type="hidden" id="IGNORE" name="IGNORE" value="<?=$ignore;?>" />

Available Sensors:
: <select multiple id="select">
        <?=ipmi_get_enabled();?>
  </select>

> Check sensors to show in all dropdown menus and readings display.
>
> Unchecked sensors will not be displayed.

<input type="hidden" id="DASHTYPES" name="DASHTYPES" value="<?=$dashtypes;?>" />

Dashboard Display:
: <select multiple id="select-dash" title="Enable IPMI sensors on the dashboard">
        <?=ipmi_get_dashtypes();?>
  </select>

> Check sensor types to show in Dashboard display. Unchecked sensor types will not be displayed.
>
> Uncheck all sensor types to disable IPMI Dashboard summary.

&nbsp;

<input type="button" value="Default" onClick="resetDispDATA(this.form);">
: <input type="submit" value="Apply"><input type="button" value="Done" onClick="done()">
</form>

<div id="title"><span class="left"><img class="icon" src="/plugins/ipmi/icons/cpu.png"> Footer Settings</span></div>

<form markdown="1" name="footer_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/ipmi.cfg" />

> Display Settings can be applied at any time.

Sensor #1:
: <select name="DISP_SENSOR1" class="display">
        <option value='false'>None</option>
        <?=ipmi_get_options($disp_sensor1);?>
  </select>

> First sensor to monitor and display in footer of webGui.

Sensor #2:
: <select name="DISP_SENSOR2" class="display">
        <option value='false'>None</option>
        <?=ipmi_get_options($disp_sensor2);?>
    </select>

> Second sensor to monitor and display in footer of webGui.

Sensor #3:
: <select name="DISP_SENSOR3" class="display">
        <option value='false'>None</option>
        <?=ipmi_get_options($disp_sensor3);?>
    </select>

> Third sensor to monitor and display in footer of webGui.

Sensor #4:
: <select name="DISP_SENSOR4" class="display">
        <option value='false'>None</option>
        <?=ipmi_get_options($disp_sensor4);?>
    </select>

> Forth sensor to monitor and display in footer of webGui.

&nbsp;

<input type="button" value="Default" onClick="resetFootDATA(this.form);">
: <input type="submit" value="Apply"><input type="button" value="Done" onClick="done()">
</form>

<script type="text/javascript" src="/plugins/ipmi/js/jquery.mask.js"></script>
<script src="/webGui/javascript/jquery.switchbutton.js"></script>
<script src="/plugins/ipmi/js/CodeMirror/lib/codemirror.js"></script>
<script src="/plugins/ipmi/js/CodeMirror/addon/display/placeholder.js"></script>
<script src="/plugins/ipmi/js/CodeMirror/addon/hint/show-hint.js"></script>
<script src="/plugins/ipmi/js/CodeMirror/mode/properties/properties.js"></script>
<script src="/plugins/ipmi/js/CodeMirror/addon/hint/anyword-hint.js"></script>

<script>
$(function(){
    // append readings tab
    $('.tabs')
        .append('<div class="tab"><input type="radio" name="tabs2" id="tab4"><label for="tab4"><img class="icon" src="/plugins/ipmi/icons/readings.png">Readings</label></div>');

    // dynamix plugin update api
    <?if (function_exists('plugin_update_available') && $version = plugin_update_available('ipmi')):?>
        showNotice('IPMI <?=$version?> available. <a>Update</a>','ipmi');
    <?endif;?>

    // select available sensors
    $('#select').dropdownchecklist( {
        emptyText: 'No Sensors Available',
        icon: {placement: 'right', toOpen: 'ui-icon-triangle-1-s', toClose: 'ui-icon-triangle-1-n'},
        width: 235,
        explicitClose: 'close',
        firstItemChecksAll: true,
        textFormatFunction: function(options) { return 'Select Sensors (unchecked will be ignored)'; },
        onComplete: function(selector){
        var values = '';
        for( i=0; i < selector.options.length; i++ ) {
            if ((selector.options[i].selected == false) && (selector.options[i].value != '')){
                if (values != '')
                    values += ',';
                values += selector.options[i].value;
            }
        }
        $('#IGNORE').val(values);
        }
    });

    // select sensor types for dashboard
    $('#select-dash').dropdownchecklist( {
        emptyText: 'None',
        icon: {placement: 'right', toOpen: 'ui-icon-triangle-1-s', toClose: 'ui-icon-triangle-1-n'},
        width: 235,
        explicitClose: 'close',
        firstItemChecksAll: true,
        textFormatFunction: function(options) { return 'Select Sensors Types for Dashboard'; },
        onComplete: function(selector){
        var values = '';
        for( i=0; i < selector.options.length; i++ ) {
            if ((selector.options[i].selected == true) && (selector.options[i].value != '')){
                if (values != '')
                    values += ',';
                values += selector.options[i].value;
            }
        }
        $('#DASHTYPES').val(values);
        }
    });

    // if png is missing, replaced with unknown.png
    $('.board-img')
        .error(function() {
            $('.board-img').attr('src', '/plugins/ipmi/images/unknown.png');
        })
        .attr('src', "/plugins/ipmi/images/<?=$board;?>.png");

    $('#bmc-reset').on('click', resetBMC);

    $('#btnTest').on('click', EventTest);

    $('#tab4').click(function() {
        $.cookie('one', 'tab1', { expires:null, path: '/'});
        location = '/Settings/IPMITools';
    });

    checkSELD(document.seld_settings);
    checkNETWORK(document.seld_settings);
    checkLOCAL(document.seld_settings);
    decData(document.seld_settings);
});

function resetDATA(form) {
    form.IPMIPOLL.selectedIndex = 2;
    form.NETWORK.selectedIndex = 0;
    form.LOCAL.selectedIndex = 0;
    form.IPADDR.value = '';
    form.USER.value = '';
    form.PASSWORD.value = '';
    form.submit();
}

function resetDispDATA(form) {
    form.IGNORE.value = '';
    form.DASHTYPES.value = '';
    form.submit();
}

function resetFootDATA(form) {
    form.DISP_SENSOR1.selectedIndex = 0;
    form.DISP_SENSOR2.selectedIndex = 0;
    form.DISP_SENSOR3.selectedIndex = 0;
    form.DISP_SENSOR4.selectedIndex = 0;
    form.submit();
}

function checkSELD(form) {
    if (form.IPMISELD.selectedIndex < 1 ){
        form.COMMAND.value = '/usr/local/emhttp/plugins/ipmi/scripts/seld_stop';
        $('#btnApply').prop('disabled', false);
    }else {
    form.COMMAND.value = '/usr/local/emhttp/plugins/ipmi/scripts/seld_start';
   }

    if ("<?=$seld_run;?>" == true)
    {
        $('.seld-run').prop('disabled', true);
        $('#btnApply').disabled = 'disabled';
        $('#btnTest').show();
   }else{
    $('.seld-run').prop('disabled', false);
        $('#btnApply').prop('disabled', false);
        $('#btnTest').hide();
    }
}

function decData(form) {
 form.PASSWORD.value = atob(form.PASSWORD.value);
}

function checkNETWORK(form) {
    if (form.NETWORK.selectedIndex < 1 )
        $('.ipmi-lan').hide();
    else {
    $('.ipmi-lan').show();
    $('.ipmi-lan').prop('disabled', (form.IPMISELD.value == 'enable'));
   }
}

function checkLOCAL(form) {
    if (form.LOCAL.selectedIndex < 1 )
        $('.ipmi-ipaddr').mask('0ZZ.0ZZ.0ZZ.0ZZ,0ZZ.0ZZ.0ZZ.0ZZ,0ZZ.0ZZ.0ZZ.0ZZ,0ZZ.0ZZ.0ZZ.0ZZ', {translation:  {'Z': {pattern: /[0-9]/, optional: true}}});
    else
        $('.ipmi-ipaddr').mask('localhost,0ZZ.0ZZ.0ZZ.0ZZ,0ZZ.0ZZ.0ZZ.0ZZ,0ZZ.0ZZ.0ZZ.0ZZ', {translation:  {'Z': {pattern: /[0-9]/, optional: true}}});
}

function verifyDATA(form) {
    form.IPMISELD.value = form.IPMISELD.value.replace(/ /g,'_');
    form.NETWORK.value = form.NETWORK.value.replace(/ /g,'_');
    form.USER.value = form.USER.value.replace(/ /g,'_');
    form.PASSWORD.value = btoa(form.PASSWORD.value);
}

// send random test event
function EventTest() {
    $.getJSON('/plugins/ipmi/include/ipmi_event_test.php',
        function(Message) {
        swal({
            title: 'Sample Event Sent:',
            text: Message,
            type: 'success',
            showCancelButton: false,
            closeOnConfirm: true,
        }, function() {
        });
    });
}

// do a warm reset of the bmc
function resetBMC(){
    swal({
        title: 'Are you sure?',
        text: 'You want to do a warm reset of the BMC!?',
        type: 'warning',
        showCancelButton: true,
        closeOnConfirm: true,
    }, function() {
        $.post('/plugins/ipmi/include/bmc_reset.php', {},function(data) {

            if(data.success)
                swal({title:Title,text:'warm reset of BMC sucessful',type:'success',closeOnConfirm: true,},function() {
                    location.reload(true);
                });

            if(data.error)
                swal({title:Title,text:data.error,type:'error'});

        }, 'json');
    });
};

</script>