Menu="Dashboard:3"
Title="IPMI Summary"
Cond="file_exists('/boot/config/plugins/ipmi/ipmidash')"
---
<link type="text/css" rel="stylesheet" href="/plugins/ipmi/css/ipmi.css">
<link type="text/css" rel="stylesheet" href="/plugins/tablesorter/css/tablesorter.css">
<link type="text/css" rel="stylesheet" href="/plugins/tablesorter/css/tablesorter-<?=$display["theme"];?>.css">
<style>
table.ipmi thead tr th{width:16.6%;padding-left:10px;}
table.ipmi tbody tr td{padding-left:10px;font-weight:bold;}
</style>

<span id="dash-switch" class="status"><input type="checkbox" id="dash-ipmi"></span>
<table class="tablesorter shift ipmi" id="tblIPMIDash">
<thead><tr><th>Status</th><th class="network sorter-ipv4Address">IP Address</th><th>Sensor</th><th>Reading</th></tr></thead>
<tbody></tbody>
</table>

<script src="/plugins/tablesorter/js/jquery.tablesorter.combined.js"></script>
<script>
$(function(){
    //dash switch set cookie and toggle archive setting
    $('#dash-ipmi').switchButton({
        labels_placement: 'left',
        on_label: 'On',
        off_label: 'Off',
        checked: ($.cookie('ipmi_dash_switch') == 1)
    })
    .change(function () {
        $.cookie('ipmi_dash_switch', $('#dash-ipmi')[0].checked ? 1 : 0, { expires: 3650 });
        $('#tblIPMIDash').toggle();
    });

    if($.cookie('ipmi_dash_switch') == 1)
        $('#tblIPMIDash').show();
    else
        $('#tblIPMIDash').hide();

    $('#tblIPMIDash').tablesorter({
        sortReset: true,
        sortRestart : true,
        sortInitialOrder: 'asc',
        widgets: ['saveSort']
    });

    sensorArray(false);
    setTimeout(sensorRefresh, 20000);

});

/* sensor refresh */
function sensorRefresh() {
  sensorArray(true);
   setTimeout(sensorRefresh, 20000);
};

/* load ipmi sensor table */
function sensorArray(Refresh){
    $.getJSON('/plugins/ipmi/include/ipmi_helpers.php', {action:'ipmidash'}, function(data) {
        $.each(data.Sensors, function (i, sensor) {
            var LowerNR = parseFloat(sensor.LowerNR);
            var LowerC  = parseFloat(sensor.LowerC);
            var LowerNC = parseFloat(sensor.LowerNC);
            var UpperNC = parseFloat(sensor.UpperNC);
            var UpperC  = parseFloat(sensor.UpperC);
            var UpperNR = parseFloat(sensor.UpperNR);
            var Color   = 'green';
            var Units   = '';
            var Type    = sensor.Type;

            if (data.DashTypes.indexOf(Type) >= 0){

            // only process sensor if reading is valid
            if (sensor.Reading != 'N/A'){
                var Reading = parseFloat(sensor.Reading);
                if (Type == 'Voltage'){
                    Units += ' ';

                    // if voltage is less than lower non-critical
                    // or voltage is greater than upper non-critical show critical
                    if (Reading < LowerNC && Reading > UpperNC)
                        Color = 'orange';

                    // if voltage is less than lower critical
                    // or voltage is greater than upper critical show non-recoverable
                    if (Reading < LowerC || Reading > UpperC)
                        Color = 'red';

                } else if (Type == 'Fan'){
                    Units += ' ';

                    // if Fan RPMs are less than lower non-critical
                    if (Reading < LowerNC || Reading < LowerC || Reading < LowerNR)
                        Color = "red";

                } else if(Type == 'Temperature'){
                    Units += '&deg;';

                    // if temperature is greater than upper non-critical show critical
                    if (Reading > UpperNC)
                        Color = 'orange';

                    // if temperature is greater than upper critical show non-recoverable
                    if (Reading > UpperC)
                        Color = 'red';
                }
                Units += sensor.Units;
            }else {
                var Reading = sensor.Reading;
                Color = 'blue'; // reading equals N/A
            }

            if(Refresh) {
                $('#'+i+' td.reading').html('<font color="'+ Color + '">'+ Reading + Units +'</font>');
            } else {
                Host = (typeof sensor.IP == 'undefined') ? '' : sensor.IP; // check if network connection was used
                $('#tblIPMIDash tbody')
                .append("<tr id='"+i+"'>"+
                '<td title="'+sensor.State+'"><img src="/plugins/dynamix/images/'+ data.State[sensor.State] +'-on.png"/></td>'+ //state
                '<td class="network">'+Host+'</td>'+ // sensor host ip address
                '<td>'+sensor.Name+'</td>'+ //sensor name
                '<td class="reading">'+ '<font color="'+ Color + '">'+ Reading + Units +'</font></td>'+ //sensor reading
                '</tr>');
            }
            }
        });
        if (!Refresh) {
            if(data.Network)
                $('.network').show();
            else
                $('.network').hide();

            // restore filters and update table for tablesorter
            var lastSearch = $('#tblIPMIDash')[0].config.lastSearch;
            $('#tblIPMIDash').trigger('update');
            $('#tblIPMIDash').trigger('search', [lastSearch]);
        }
    });
};

</script>