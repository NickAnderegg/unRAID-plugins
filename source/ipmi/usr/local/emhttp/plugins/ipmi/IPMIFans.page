Menu="IPMI:2"
Title="Fan Control"
Markdown="false"
---
<?if ($board_status !== false):?>
<div id="title" style="margin-top: -22px;">
    <span class="left"><img class="icon" src="/plugins/ipmi/icons/fancontrol.png"> Fan Control </span>
    <span class="status" style="margin-top: 50px;margin-left: -200px;">
    <img class="board-img" src=""></span>
    <span class="status" id="fanctrl-status">Fan Control: <?=$fanctrl_status;?></span>
</div>

<form name="fanctrl_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/fan.cfg" />
<input type="hidden" id="FANCMD" name="#command" value="" />

<dl>
    <dt>Fan Control:</dt>
    <dd>
        <select name="FANCONTROL" class="fanctrl" size="1" onChange="checkFANCTRL(this.form);" title="Enable fan control based on selected temperature sensors">
        <?=mk_option($fanctrl, 'disable', 'No')?>
        <?=mk_option($fanctrl, 'enable', 'Yes')?>
        </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>Enable IPMI Fan Control daemon to run in the background.  It will also automatically start when system starts.</p>
</blockquote>
<dl>
    <dt>Temperature Polling Time:</dt>
    <dd>
        <select id="FANPOLL" class="fanctrl fanctrl-run" name="FANPOLL" size="1" title="Amount of time between ipmi temperature checks">
        <?=mk_option($fanpoll, '1', '1 min');?>
        <?=mk_option($fanpoll, '2', '2 min');?>
        <?=mk_option($fanpoll, '3', '3 min');?>
        <?=mk_option($fanpoll, '4', '4 min');?>
        <?=mk_option($fanpoll, '5', '5 min');?>
        <?=mk_option($fanpoll, '10', '10 min');?>
        <?=mk_option($fanpoll, '15', '15 min');?>
        <?=mk_option($fanpoll, '30', '30 min');?>
        </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>Specify how long between checking the temperature sensors and executing fan speed changes.  Default is 3 minutes.</p>
</blockquote>

<input type="hidden" name="BOARD" value="<?=$board;?>">

<?if ($netsvc == 'enable'):?>

<dl>
    <dt>Fan Control IP Address:</dt>
    <dd>
        <select id="FANIP" class="fanctrl fanctrl-run" name="FANIP" size="1" title="ip address of ipmi fan to control">
        <?get_fanip_options();?>
    </select>
    </dd>
</dl>
<blockquote class="inline_help">
    <p>If network connections are enabled, select which ipmi ip address to use for controlling fans. Only one system can be controlled.</p>
</blockquote>

<?endif;?>

&nbsp;

<dl>
    <dt><input id="FAN_DEFAULT" class="fanctrl" type="button" value="Default" onClick="resetFANDATA(this.form);" title="loads the default values for fan control">
    <?if (($board == 'AsRock') || ($board == 'ASRockRack')):?>
        <input id="btnConfig" class="fanctrl fanctrl-run" type="button" value="Configure" title="tests your fans and determines their location for fan control">
    <?endif;?>
    </dt>
    <dd><input id="btnFANApply" type="submit" value="Apply" onClick="verifyFANDATA(this.form)"><input type="button" value="Done" onClick="done()"></dd>
</dl>
<blockquote class="inline_help">
    <p>'Default' loads the default values for fan control.</p>
    <p>'Configure' button tests your fans and determines their location for fan control. All fans will initially be set to full speed. Each location will be tested at one third speed to determine which fan is present. This will take about 1 min. On completion fans will return to auto and you can start fan control</p>
</blockquote>

</form>

<!-- Fan Settings -->

<div id="title"><span class="left"><img class="icon" src="/plugins/ipmi/icons/fan.png"> Fan Settings </span>

<?if ($board_asrock !== false):?>
    <span class="status" style="margin-top: 30px;"><input type="checkbox" id="advancedview"></span>
<?endif;?>

</div>
<form name="fanctrl_options" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="ipmi/fan.cfg" />

<div id="fanctrl-options">

<blockquote class="inline_help">
    <p>List all fans available for control with current speed and corresponding temperature sensor with its current value.</p>
    <p>Fan speed minimum (1-64):  Select the lowest value for which a fan can be set. Useful to prevent fan from stopping or going below a certain rpm. A value of 64 is full on.</p>
    <p>Temperature sensor:  Temperature sensor to monitor when determining fan speed.</p>
    <p>Low temperature threshold (°C):  Lowest temperature in the linear range to determine fan speed.  Below this temperature the fan will turn off unless minimum is set. </p>
    <p>High temperature threshold (°C):  Highest temperature in the linear range to determine fan speed. Above this temperature fan with run at full speed.</p>
</blockquote>

<?if ((($netsvc == 'disable') || (($netsvc == 'enable') && ($fanip != 'None'))) && ($board_status)):?>
    <?get_fanctrl_options();?>
<?endif;?>
</div>
&nbsp;


<dl>
    <dt>&nbsp;</dt>
    <dd><input type="submit" value="Apply" onClick="verifyFANOPT(this.form)"><input type="button" value="Done" onClick="done()"></dd>
</dl>

</form>

<div id="title" ><span class="left"><img class="icon" src="/plugins/ipmi/icons/fan.png"> Fan Control Log </span></div>
<table class="tablesorter fanlog" style="margin-top: -22px;">
    <thead>
        <th>Logfile</th>
        <th>Size</th>
        <th>Clear</th>
    </thead>
    <tbody>
<?
$log = '/var/log/ipmifan';
if(is_file($log)){
    echo "<tr><td><a class='fanlog-a' id='fanlog-file' title='$log' onclick=\"openWindow('/webGui/scripts/tail_log&arg1=ipmifan','Fan Control Log Information',600,900);\">$log</a></td><td id='fanlog-size'>"
    .filesize($log)."</td><td><a class='fanlog-a' id='fanlog-clear' ><i class='fa fa-trash' title='clear fan log'></i></a></td></tr>";
}
?>
    </tbody>
</table>

<script>
$(function(){
    <?if ($board_asrock !== false):?>

    // check if board supports ipmi
    $('#tab2').click(function() {
        checkBoard();
    });

    if($.cookie('one') == 'tab2')
        checkBoard();

    //advanced view switch set cookie and toggle advanced columns
    $('#advancedview').switchButton({
        labels_placement: 'left',
        on_label: 'Advanced View',
        off_label: 'Basic View',
        checked: ($.cookie('fanctrl_view_mode') == 'advanced')
    })
    .change(function () {
        //$('.fanctrl-settings').toggle('slow');
        $.cookie('fanctrl_view_mode', $('#advancedview')[0].checked ? 'advanced' : 'basic', { expires: 3650 });
        toggleFanCTRL();
    });

    toggleFanCTRL();


    $('.fanctrl-temp')
        .each(function() {
            var FanName = '.' + $(this).attr('name');
            $(FanName).prop('disabled', ($(this)[0].selectedIndex == 0));
        })
        .on('change', function() {
            var FanName = '.' + $(this).attr('name');
            $(FanName).prop('disabled', ($(this)[0].selectedIndex == 0));
        });

    $('#btnConfig').click(function() {
                openBox('/plugins/ipmi/scripts/ipmi2json', 'IPMI Fan Config', 600, 900, true);
    });

    <?endif;?>

    $('#fanlog-clear').on('click', clearFanLOG);

    $('#readings').click(function() {
        $.cookie('one', 'tab1', { expires:null, path: '/'});
        location ='/Tools/IPMITools';
    });

    checkFANCTRL(document.fanctrl_settings);

});

function resetFANDATA(form) {
    form.FANCONTROL.selectedIndex = 0;
    form.FANPOLL.selectedIndex    = 2;
    form.FANIP.selectedIndex      = 0;
    form.BOARD.value              = '';
    form.submit();
}

function checkFANCTRL(form) {
    if (form.FANCONTROL.selectedIndex < 1 ){
        form.FANCMD.value = '/usr/local/emhttp/plugins/ipmi/scripts/fanctrl_stop';
    }else {
        form.FANCMD.value = '/usr/local/emhttp/plugins/ipmi/scripts/fanctrl_start';
    }

    if ("<?=$fanctrl_run;?>" == true)
    {
        $('.fanctrl-run').prop('disabled', true);
        $('#btnFanApply').disabled = 'disabled';
    }else{
        $('.fanctrl-run').prop('disabled', false);
        $('#btnFanApply').prop('disabled', false);
    }
}

function verifyFANDATA(form) {
    form.FANCONTROL.value = form.FANCONTROL.value.replace(/ /g,'_');
}

/* empty fan log */
function clearFanLOG(){
    $.get('/plugins/ipmi/include/fanlog_clear.php', {},function() {
        $('#fanlog-size').html('0');
    });
}

<?if ($board_asrock !== false):?>

function checkBoard() {
    if ("<?=$board_file_status;?>" == false) {
       swal({title:'Fan Config JSON File Missing!',text:'You have not configured your fans yet. Stop Fan Control and Click the Configure button below to test your fans and determine their location for fan control. All fans will initially be set to full speed. Each location will be tested at one third speed to determine which fan is present. This will take about 1 min. On completion fans will return to auto and you can start fan control.',type:'warning',closeOnConfirm: true,},function() {
       });
    }
}

function toggleFanCTRL() {
    if ($.cookie('fanctrl_view_mode') == 'advanced') {
        $('.fanctrl-settings').show('slow');
        $('.fanctrl-basic').hide('slow');
    }else{
        $('.fanctrl-basic').show('slow');
        $('.fanctrl-settings').hide('slow');
    }
}
<?endif;?>
</script>
<?endif;?>
