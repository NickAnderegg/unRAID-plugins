#!/usr/bin/php
<?php
##############################
######  DEAMON SECTION  ######
##############################
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_options.php';
$netopts = ($netsvc == 'enable') ? "-h $fanip -u $user -p ".
	base64_decode($password)." --session-timeout=5000 --retransmission-timeout=1000" : '';
$debug = FALSE;

set_time_limit(0);
$prog = pathinfo(__FILE__, PATHINFO_FILENAME);
openlog($prog, LOG_PID | LOG_PERROR, LOG_LOCAL0);

$usage = <<<EOF

Process settings in ipmi plugin fan config.
Control fans based on config values and [options].

Usage: $prog [options]

  -q, --quiet      suppress all messages
  -v, --verbose    print all messages
      --debug      turn on debugging
      --help       display this help and exit
      --version    output version information and exit


EOF;

$shortopts = 'qv';
$longopts = [
	'debug',
	'help',
	'quiet',
	'verbose',
	'version'
];
$args = getopt($shortopts, $longopts);

if (array_key_exists('help', $args)) {
	echo $usage;
	exit(1);
}

if (array_key_exists('version', $args)) {
	echo 'IPMI Fan Control: 1.0\n';
	exit(1);
}

$argq   = (array_key_exists('q', $args) || array_key_exists('quiet', $args));
$argv   = (array_key_exists('v', $args) || array_key_exists('verbose', $args));
$debug  = (array_key_exists('debug', $args));

#############################################
# ASRock                                    #
# ipmi-raw 00 3a 01 00 00 00 00 00 00 00 00 #
# ipmi-raw 00 3a 01 AA BB CC DD EE FF GG HH #
# 0x00 = smartfan mode                      #
# 0x01 - 0x64  = 1% - 100%                  #
#############################################

$boards = [
	'ASRock' => [
		'raw' => '00 3a 01',
		'fans' => [
			'CPU_FAN1'  => '00', // AA
			'CPU_FAN2'  => '00', // BB
			'REAR_FAN1' => '00', // CC
			'REAR_FAN2' => '00', // DD
			'FRNT_FAN1' => '00', // EE
			'FRNT_FAN2' => '00', // FF
			'FRNT_FAN3' => '00', // GG
			'FRNT_FAN4' => '00'] // HH
	]
];



##############################
###### FUNCTION SECTION ######
##############################

/* logger*/
function logger($msg, $quiet = false) {
	syslog(LOG_INFO, $msg);
	if (!$quiet) {
		echo '\n'.$msg.' \n';
	}
}

/* debug */
function debug($m){
  global $prog, $debug;
  if($debug){
    $STDERR = fopen('php://stderr', 'w+');
    fwrite($STDERR, $m.'\n');
    fclose($STDERR);
  }
}

/* scan directory for type */
function scan_dir($dir, $type = ""){
  $out = array();
  foreach (array_slice(scandir($dir), 2) as $entry){
    $sep   = (preg_match("/\/$/", $dir)) ? "" : "/";
    $out[] = $dir.$sep.$entry ;
  }
  return $out;
}

/* get highest temp of hard drives */
function get_highest_temp($hdds){
  $highest_temp="0";
  foreach ($hdds as $hdd) {
    if (shell_exec("hdparm -C ${hdd} 2>/dev/null| grep -c standby") == 0){
      $temp = preg_replace("/\s+/", "", shell_exec("smartctl -A ${hdd} 2>/dev/null| grep -m 1 -i Temperature_Cel | awk '{print $10}'"));
      $highest_temp = ($temp > $highest_temp) ? $temp : $highest_temp;
    }
  }
  debug("Highest temp is ${highest_temp}ÂºC");
  return $highest_temp;
}

/* get all hard drives except flash drive */
function get_all_hdds(){
  $hdds = array();
  $flash = preg_replace("/\d$/", "", realpath("/dev/disk/by-label/UNRAID"));
  foreach (scan_dir("/dev/") as $dev) {
    if(preg_match("/[sh]d[a-z]+$/", $dev) && $dev != $flash) {
      $hdds[] = $dev;
    }
  }
  return $hdds;
}

/* get fan and temp sensors */
function ipmi_get_fantemp() {
	global $options;
	$cmd = "/usr/sbin/ipmi-sensors --comma-separated-output --no-header-output --interpret-oem-data $options 2>/dev/null";
	exec($cmd, $output, $return);

	if ($return)
		return []; // return empty array if error

	// get highest hard drive temp and add sensor
	$hdds =  get_all_hdds();
	$hdd_temp = get_highest_temp($hdds);
	$output[] = "99,HDD Temperature,Temperature, $hdd_temp,C,Ok";

	// key names for ipmi sensors output
	$keys = ['ID', 'Name', 'Type', 'Reading', 'Units', 'Event'];
	$sensors = [];

	foreach($output as $line){

	/// add sensor keys as keys to ipmi sensor output
		$sensor_raw = explode(",", $line);
		$size_raw = sizeof($sensor_raw);
		$sensor = ($size_raw < 6) ? []: array_combine($keys, array_slice($sensor_raw,0,6,true));

		if ($sensor['Type'] == 'Temperature' || $sensor['Type'] == 'Fan')	
			$sensors[$sensor['ID']] = $sensor;
	}
	return $sensors; // sensor readings
	unset($sensors);
}

##############################
#####  PROGRAM SECTION  ######
##############################

if(empty($fancfg)){
		$msg = "Fan control settings file $fancfg_file is missing or empty";
		logger($msg, $argq);
  exit(1);
}

$board = $fancfg['IPMIBOARD'];
if (!array_key_exists($board, $boards)){
	$msg = 'Your motherboard is not supported yet';
	logger($msg, $argq);
  exit(1);
}

$raw  = $boards[$board]['raw'];
$fans = $boards[$board]['fans'];
$MD5  = md5_file($fancfg_file);
$log  = '/var/log/ipmifan';

while(TRUE){ while(TRUE){
####  DO YOUR STUFF HERE  ####

	/* Get sensor info and check connection */
	if(($mod) || ($netsvc == 'enable'))
		$sensors = ipmi_get_fantemp();

	for ($i = 0; $i < 7; $i++) {

		$fan      = (isset($fancfg["FAN$i"]))     ? $fancfg["FAN$i"]     : 0;
		$fan_name = $sensors[$fan]['Name'];
		$fan_temp = (isset($fancfg["FANTEMP$i"])) ? $fancfg["FANTEMP$i"] : 0;
		$fan_min  = (isset($fancfg["FANMIN$i"]))  ? $fancfg["FANMIN$i"]  : 1;
		
		if($fan_temp != 0) {
			$temp_lo = (isset($fancfg["TEMPLO$i"])) ? $fancfg["TEMPLO$i"]  : 30;
			$temp_hi = (isset($fancfg["TEMPHI$i"])) ? $fancfg["TEMPHI$i"]  : 40;

			$temp    = $sensors[$fan_temp]['Reading'];

			if ($temp <= $temp_lo)
				$pwm = 1;
			elseif ($temp >= $temp_hi)
				$pwm = 64;
			else
				$pwm = round((($temp-$temp_lo)/($temp_hi-$temp_lo))*16)*4;

			//impose fan lower limit
			$pwm = ($pwm <= $fan_min) ? $fan_min : $pwm;
		}else
			$pwm = 0;

	//pad pwm to 2 places
	$pwm = str_pad($pwm, 2, '0', STR_PAD_LEFT);

	//check array for fan name
	if(array_key_exists($fan_name, $fans))
		$fans[$fan_name] = $pwm;
	}

	//get values for all fans
	$hex = "";
	foreach($fans as $value){
		$hex .= " $value";
	}

	//compare last value to new value
	if($current_hex != $hex){
		$cmd = "ipmi-raw $raw$hex ";
		shell_exec($cmd.$netopts);

		//log changes
		$timestamp = date('Y-m-d h:i:s');
		$msg = "$timestamp adjusting fans to $hex\n";
			file_put_contents($log,$msg,FILE_APPEND);
		$current_hex = $hex;
	}

	/* print variable */
	$defined_vars = get_defined_vars();

	//remove vars from array to save
	unset($defined_vars['current_hex'],$defined_vars['MD5']);

	foreach (array("_GET","_POST","_COOKIE","_FILES","argv","argc","_SERVER") as $i)
		unset($defined_vars[$i]);

	//add saved vars to array for debug print
	$defined_vars['current_hex'] = $current_hex;
	$defined_vars['MD5'] = $MD5;
	debug("\nDECLARED VARIABLES:\n".print_r($defined_vars, true));
	unset($defined_vars);

	$time1 = time();

	for ($i=0; $i < $fanpoll*6 ; $i++) { 
		sleep(10);
		$MD5_new = md5_file($fancfg_file);
		if((is_file($fancfg_file)) && ($MD5_new != $MD5)){
 			$msg = 'fan control config file updated, reloading settings.';
			$fancfg = parse_ini_file($fancfg_file);
			logger($msg, $argq);
			$MD5 = $MD5_new;
			file_put_contents($log,$msg.'\n',FILE_APPEND);
			break;
  		}
	}
	debug("Sleep ".(time()-$time1)." seconds.");

######  END OF SECTION  ######
	};
};
?>