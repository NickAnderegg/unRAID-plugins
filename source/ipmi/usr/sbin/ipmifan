#!/usr/bin/php
<?php
##############################
######  DEAMON SECTION  ######
##############################
$DEBUG        = FALSE;

# DO NOT TOUCH
set_time_limit(0);
$prog = pathinfo(__FILE__, PATHINFO_FILENAME);
openlog($prog, LOG_PID | LOG_PERROR, LOG_LOCAL0);

$usage = <<<EOF

Process settings in ipmi plugin fan config.
Control fans based on config values and [options].

Usage: $prog [options]

  -v, --verbose    print all messages
      --debug      turn on debugging
      --help       display this help and exit
      --version    output version information and exit


EOF;

$shortopts = "v";
$longopts = [
	"debug",
	"help",
	"verbose",
	"version"
];
$args = getopt($shortopts, $longopts);

if (array_key_exists("help", $args)) {
	echo $usage;
	exit(1);
}

if (array_key_exists("version", $args)) {
	echo "IPMI Fan Control: 1.0\n";
	exit(1);
}

$argv   = (array_key_exists("v", $args) || array_key_exists("verbose", $args));
$DEBUG  = (array_key_exists("debug", $args));

#############################################
# ASRock                                    #
# ipmi-raw 00 3a 01 00 00 00 00 00 00 00 00 #
# ipmi-raw 00 3a 01 AA BB CC DD EE FF GG HH #
# 0x00 = smartfan mode                      #
# 0x01 - 0x64  = 1% - 100%                  #
#############################################
/*Fan Speed CLI ATEN X9
ipmitool raw 0x30 0x91 0x5A 0x3 0x0 0x0
ipmitool raw 0x30 0x91 0x5A 0x3 0x1 0x0
ipmitool raw 0x30 0x91 0x5A 0x3 0x2 0x0
ipmitool raw 0x30 0x91 0x5A 0x3 0x3 0x0

One is for Write and one is for Read.
// for full speed
ipmitool raw 0x30 0x91 0x5A 0x3 0x10 0xff
ipmitool raw 0x30 0x91 0x5A 0x3 0x11 0xff

//for half speed
ipmitool raw 0x30 0x91 0x5A 0x3 0x10 0x7f
ipmitool raw 0x30 0x91 0x5A 0x3 0x11 0x7f

Set/Get Fan speed mode
Input : NetFn 0x30
Cmd 0x45
Data1 Get/Set ->[0/1]
Data2 Fan Speed Mode, standard/full/optimal -> [0/1/2] // for Set only

Output: Completion Code 0x00

Example: Set fans to full speed would be #ipmitool raw 0x30 0x45 1 1

if ($max_temp > 39) {
  # at least one hard drive is 40 deg C or higher
  # set fan speed control to Full
  `ipmitool raw 0x30 0x45 0x01 0x01`
}
elsif ($max_temp == 39 ){
  # maximum drive temperature is 39 deg C
  # set fan speed to 50% duty cycle
  `ipmitool raw 0x30 0x70 0x66 0x01 0x00 0x32`
}
 
else {
  # all hard drive temperatures are 38 deg C or cooler
  # set fan speed control to Optimal
  `ipmitool raw 0x30 0x45 0x01 0x02`
}

0x30 0x70 0x66 Fan Control Manually (X10)
#100% duty cycle
ipmitool raw 0x30 0x70 0x66 0x01 0x00 0x64
     
#50% duty cycle
ipmitool raw 0x30 0x70 0x66 0x01 0x00 0x32
The last value is the duty cycle, with max = 64, and minimum = 0.
You can set the duty cycle in 64 steps, between minimum and full speed.
*/
$boards = [
	'ASRock' => [
		'raw' => '00 3a 01',
		'fans' => [
			'CPU_FAN1'  => '00', // AA
			'CPU_FAN2'  => '00', // BB
			'REAR_FAN1' => '00', // CC
			'REAR_FAN2' => '00', // DD
			'FRNT_FAN1' => '00', // EE
			'FRNT_FAN2' => '00', // FF
			'FRNT_FAN3' => '00', // GG
			'FRNT_FAN4' => '00'] // HH
	]
];

##############################
#####  PROGRAM SECTION  ######
##############################
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_options.php';
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_hdparm.php';

/* get fan and temp sensors */
function ipmi_get_fantemp($options=null) {
	$cmd = "/usr/sbin/ipmi-sensors --comma-separated-output --no-header-output --interpret-oem-data $options 2>/dev/null";
	exec($cmd, $output, $return);

	if ($return)
		return []; // return empty array if error

	// get highest hard drive temp and add sensor
	$hdds =  get_all_hdds();
	$hdd_temp = get_highest_temp($hdds);
	$output[] = "99,HDD Temperature,Temperature, $hdd_temp,C,Ok";

	// key names for ipmi sensors output
	$keys = ['ID', 'Name', 'Type', 'Reading', 'Units', 'Event'];
	$sensors = [];

	foreach($output as $line){

	/// add sensor keys as keys to ipmi sensor output
		$sensor_raw = explode(",", $line);
		$size_raw = sizeof($sensor_raw);
		$sensor = ($size_raw < 6) ? []: array_combine($keys, array_slice($sensor_raw,0,6,true));

		if ($sensor['Type'] == 'Temperature' || $sensor['Type'] == 'Fan')	
			$sensors[$sensor['ID']] = $sensor;
	}
	return $sensors; // sensor readings
	unset($sensors);
}

if(!empty($fan_cfg) && $fancontrol == "enable"){
	$board	= $fan_cfg['IPMIBOARD'];
	$raw		= $boards["$board"]['raw'];

	while(TRUE){ while(TRUE){
	####  DO YOUR STUFF HERE  ####

	$fans		= $boards["$board"]['fans'];

	/* Get sensor info and check connection */
	if($ipmi_mod || $ipmi_network == 'enable')
		$ipmi_sensors = ipmi_get_fantemp($fan_options);

	for ($i = 0; $i < 7; $i++) {

		$ipmi_fan	= (isset($fan_cfg["FAN$i"]))		? $fan_cfg["FAN$i"]     : 0;
		$fan_name	= $ipmi_sensors["$ipmi_fan"]['Name'];
		$ipmi_temp	= (isset($fan_cfg["FANTEMP$i"])) ? $fan_cfg["FANTEMP$i"] : 0;
		$fan_min    = (isset($fan_cfg["FANMIN$i"]))  ? $fan_cfg["FANMIN$i"]  : 1;
		
		if($ipmi_temp != 0) {
			$temp_lo = (isset($fan_cfg["TEMPLO$i"]))  ? $fan_cfg["TEMPLO$i"]  : 30;
			$temp_hi = (isset($fan_cfg["TEMPHI$i"]))  ? $fan_cfg["TEMPHI$i"]  : 40;

			$temp    = $ipmi_sensors["$ipmi_temp"]['Reading'];

			if ($temp <= $temp_lo)
				$pwm = 1;
			elseif ($temp >= $temp_hi)
				$pwm = 64;
			else
				$pwm = round((($temp-$temp_lo)/($temp_hi-$temp_lo))*16)*4;
			//impose fan lower limit
			$pwm = ($pwm <= $fan_min) ? $fan_min : $pwm;
		}else
			$pwm = 0;
	
	
	//pad pwm to 2 places
	$pwm = str_pad($pwm, 2, '0', STR_PAD_LEFT);

	//check array for fan name
	if(array_key_exists($fan_name, $fans))
		$fans["$fan_name"] = $pwm;
	}

	//get values for all fans
	$hex = "";
	foreach($fans as $fan){
		$hex .= " $fan";
	}

	//compare last value to new value
	if($current_hex != $hex){
		$cmd = "ipmi-raw $raw$hex ";
		shell_exec($cmd.$options);
		syslog(LOG_INFO, "adjusting fans from $current_hex to $hex");
		$current_hex = $hex;
	}
# PRINT VARIABLES DEBUG 
$defined_vars = get_defined_vars();
unset($defined_vars['current_hex']); //remove current from list
foreach (array("_GET","_POST","_COOKIE","_FILES","argv","argc","_SERVER") as $i) {
	unset($defined_vars[$i]);
}
$defined_vars['current_hex'] = $current_hex; //keep last value
debug("\nDECLARED VARIABLES:\n".print_r($defined_vars, true));
unset($defined_vars);

$time1 = time();
$MD5 = md5_file($fan_cfg_file);
for ($i=0; $i < $fanpoll*6 ; $i++) { 
	sleep(10);
	if (is_file($fan_cfg_file)){
 		if (md5_file($fan_cfg_file) != $MD5){
  			syslog(LOG_INFO, "config file updated, reloading.");
			$fan_cfg = parse_ini_file($fan_cfg_file);
		}
  	}
}
debug("Sleep ".(time()-$time1)." seconds.");

######  END OF SECTION  ######
};
};
} else {
  exit(1);
}

?>