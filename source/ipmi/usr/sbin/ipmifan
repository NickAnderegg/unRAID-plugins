#!/usr/bin/php
<?php
##############################
######  DEAMON SECTION  ######
##############################
$DEBUG        = FALSE;

# DO NOT TOUCH
set_time_limit(0);
$prog = pathinfo(__FILE__, PATHINFO_FILENAME);
openlog($prog, LOG_PID | LOG_PERROR, LOG_LOCAL0);

$usage = <<<EOF

Process settings in ipmi plugin fan config. Control fans based on config values and [options].

Usage: $prog [options]

  -v, --verbose    print all messages
      --debug      turn on debugging
      --help       display this help and exit
      --version    output version information and exit


EOF;

$shortopts = "v";
$longopts = [
	"debug",
	"help",
	"verbose",
	"version"
];
$args = getopt($shortopts, $longopts);

if (array_key_exists("help", $args)) {
	echo $usage;
	exit(1);
}

if (array_key_exists("version", $args)) {
	echo "IPMI Fan Control: 1.0\n";
	exit(1);
}

$argv   = (array_key_exists("v", $args) || array_key_exists("verbose", $args));
$DEBUG  = (array_key_exists("debug", $args));

#############################################
# ipmi-raw 00 3a 01 00 00 00 00 00 00 00 00 #
# ipmi-raw 00 3a 01 AA BB CC DD EE FF GG HH #
# 0x00 = smartfan mode                      #
# 0x01 - 0x64  = 1% - 100%                  #
#############################################
$boards = [
	'ASRock' => [
		'raw' => '00 3a 01',
		'fans' => [
		'CPU_FAN1'  => '00', // AA
		'CPU_FAN2'  => '00', // BB
		'REAR_FAN1' => '00', // CC
		'REAR_FAN2' => '00', // DD
		'FRNT_FAN1' => '00', // EE
		'FRNT_FAN2' => '00', // FF
		'FRNT_FAN3' => '00', // GG
		'FRNT_FAN4' => '00'] // HH
	]
];

function debug($m){
  global $prog, $DEBUG;
  if($DEBUG){
    $STDERR = fopen('php://stderr', 'w+');
    fwrite($STDERR, $m."\n");
    fclose($STDERR);
  }
}

##############################
#####  PROGRAM SECTION  ######
##############################
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_helpers.php';

if(!empty($fan_cfg) && $fancontrol == "enable"){
	$board	= $fan_cfg['IPMIBOARD'];
	$raw		= $boards["$board"]['raw'];

	while(TRUE){ while(TRUE){
	####  DO YOUR STUFF HERE  ####

	$fans		= $boards["$board"]['fans'];

	/* Get sensor info and check connection */
	if($ipmi_mod || $ipmi_network == 'enable')
		$ipmi_sensors = ipmi_get_readings($ipmi_options);

	for ($i = 0; $i < 7; $i++) {

			$ipmi_fan	= (isset($fan_cfg["FAN$i"]))		? $fan_cfg["FAN$i"] : 0;
			$fan_name	= $ipmi_sensors["$ipmi_fan"]['Name'];
			$ipmi_temp	= (isset($fan_cfg["FANTEMP$i"])) ? $fan_cfg["FANTEMP$i"] : 0;

		if($ipmi_temp != 0) {
			$temp_lo		= (isset($fan_cfg["TEMPLO$i"]))	? $fan_cfg["TEMPLO$i"] : 30;
			$temp_hi		= (isset($fan_cfg["TEMPHI$i"]))	? $fan_cfg["TEMPHI$i"] : 50;

			$temp			= $ipmi_sensors["$ipmi_temp"]['Reading'];

			if ($temp <= $temp_lo)
				$pwm = "01";
			else if ($temp >= $temp_hi)
				$pwm = "64";
			else
				$pwm = str_pad(round((($temp-$temp_lo)/($temp_hi-$temp_lo))*64), 2, '0', STR_PAD_LEFT);
				}else
					$pwm = "00";

				if(array_key_exists($fan_name, $fans))
			$fans["$fan_name"] = $pwm;
	}
	$hex = "";
	foreach($fans as $fan){
		$hex .= " $fan";
	}

	if($oldhex != $hex){
		$cmd = "ipmi-raw $raw$hex ";
		shell_exec($cmd.$options);
		syslog(LOG_INFO, "adjusting fans to $hex");
		$oldhex = $hex;
	}
# PRINT VARIABLES DEBUG 
$defined_vars = get_defined_vars();
foreach (array("_GET","_POST","_COOKIE","_FILES","argv","argc","_SERVER") as $i) {unset($defined_vars[$i]);}
debug("\nDECLARED VARIABLES:\n".print_r($defined_vars, true));
//unset($defined_vars);

$time1 = time();
//$MD5 = md5_file($fan_cfg_file);
for ($i=0; $i < $fanpoll*6 ; $i++) { 
  sleep(10);
  //if (md5_file($fan_cfg_file) != $MD5){syslog(LOG_INFO, "config file updated, reloading."); $i=10000;}
}
debug("Sleep ".(time()-$time1)." seconds.");

######  END OF SECTION  ######
};
};
} else {
  exit(1);
}

?>