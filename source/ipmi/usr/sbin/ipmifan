#!/usr/bin/php
<?php
##############################
######  DEAMON SECTION  ######
##############################
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_options.php';
require_once '/usr/local/emhttp/plugins/ipmi/include/ipmi_settings_fan.php';
$debug = FALSE;

set_time_limit(0);
$prog     = pathinfo(__FILE__, PATHINFO_FILENAME);
$lockfile = "/var/run/${prog}.pid";
$log      = '/var/log/ipmifan';
$service  = __FILE__;
openlog($prog, LOG_PID | LOG_PERROR, LOG_LOCAL0);

$usage = <<<EOF

Process settings in ipmi plugin fan config.
Control fans based on config values and [options].

Usage: $prog [options]

  -a, --auto       set fans to auto
      --full       set fans to full speed
  -f, --force      force start
  -q, --quiet      suppress all messages
  -v, --verbose    print all messages
      --debug      turn on debugging
      --daemon     run in the background
      --help       display this help and exit
      --quit       stop daemon if running
      --version    output version information and exit


EOF;

$shortopts = 'adfqv';
$longopts = [
    'auto',
    'daemon',
    'debug',
    'force',
    'full',
    'help',
    'quit',
    'quiet',
    'verbose',
    'version'
];
$args = getopt($shortopts, $longopts);

if (array_key_exists('help', $args)) {
    echo $usage.PHP_EOL;
    exit(0);
}

if (array_key_exists('version', $args)) {
    echo 'IPMI Fan Control: 1.0'.PHP_EOL;
    exit(0);
}

$arga   = (array_key_exists('a', $args) || array_key_exists('auto', $args));
$argf   = (array_key_exists('full', $args));
$force  = (array_key_exists('f', $args) || array_key_exists('force', $args));
$argq   = (array_key_exists('q', $args) || array_key_exists('quiet', $args));
$argv   = (array_key_exists('v', $args) || array_key_exists('verbose', $args));
$debug  = (array_key_exists('debug', $args));
$daemon = (array_key_exists('d', $args) || array_key_exists('daemon', $args));
$quit   = (array_key_exists('quit', $args));


if (file_exists($board_file)) {
        $board_json = json_decode(file_get_contents($board_file), true);
        $raw  = $board_json[$board]['raw'];
}

if(file_exists($lockfile)){
    $lock_pid = file($lockfile, FILE_IGNORE_NEW_LINES)[0];
    $pid_running = preg_replace("/\s+/", "", shell_exec("ps -p $lock_pid | grep $lock_pid"));
    if($pid_running){
        if($quit){
            fanlog('Stopping Fan Control'); 
            syslog(LOG_INFO, "killing daemon with PID [$lock_pid]");
            exec("kill $lock_pid");
            unlink($lockfile);
            autofan();
            exit(0);
        }else{
            echo "$prog is already running [$lock_pid]".PHP_EOL;
            exit(0);
        }
    }else{
        if($quit){
            echo "$lock_pid is not currently running".PHP_EOL;
            unlink($lockfile);
            exit(0);
        }else
            file_put_contents($lockfile, getmypid());
    }
}else{
    if($quit){
        echo "$prog not currently running".PHP_EOL;
        exit(0);
    }else
        file_put_contents($lockfile, getmypid());
}

if($arga){
        autofan();
        exit(0);
}

if($argf){
        fullfan();
        exit(0);
}

if(!($force) && ($fanctrl == 'disable' )){
        echo "$prog is not enabled in $fancfg_file\ntype: $prog -f to force start".PHP_EOL;
        exit(0);
}

if (!file_exists($board_file)) {
    $msg = "Your $board motherboard is not supported or setup yet";
    logger($msg, $argq);
    exit(1);
}

if($daemon){
    $options = ($force) ? '--force' : ''; 
    exec("php $service $options 1>/dev/null ".($debug ? "":"2>&1 ")."&");
    syslog(LOG_INFO, "process started. To terminate it, type: $prog --quit");
    exit(0);
}

#############################################
# ASRock                                    #
# ipmi-raw 00 3a 01 00 00 00 00 00 00 00 00 #
# ipmi-raw 00 3a 01 AA BB CC DD EE FF GG HH #
# 00 = smartfan mode                        #
# 01 - 64  = 1% - 100%                      #
#############################################

##############################
###### FUNCTION SECTION ######
##############################

/* logger*/
function logger($msg, $quiet = false) {
    syslog(LOG_INFO, $msg);
    if (!$quiet)
        echo PHP_EOL.$msg.PHP_EOL;
}

/* logfile */
function fanlog($msg) {
    global $log;
    $msg = date('Y-m-d H:i:s').' '.$msg.PHP_EOL;
    file_put_contents($log,$msg,FILE_APPEND);
}

/* debug */
function debug($m){
  global $prog, $debug;
  if($debug){
    $STDERR = fopen('php://stderr', 'w+');
    fwrite($STDERR, $m.PHP_EOL);
    fclose($STDERR);
  }
}

/* auto fan */
function autofan() {
    global $board_json, $board, $raw, $fanopts;
    fanlog('Setting fans to auto');
    $auto = $board_json[$board]['auto'];
    $cmd  = "ipmi-raw $raw $auto $fanopts 2>&1 >/dev/null &";
    shell_exec($cmd);
    }

/* full speed fan */
function fullfan() {
    global $board_json, $board, $raw, $fanopts;
    fanlog('Setting fans to full speed');
    $full = $board_json[$board]['full'];
    $cmd = "ipmi-raw $raw $full $fanopts 2>&1 >/dev/null &";
    shell_exec($cmd);
    }

/* scan directory for type */
function scan_dir($dir, $type = ""){
  $out = array();
  foreach (array_slice(scandir($dir), 2) as $entry){
    $sep   = (preg_match("/\/$/", $dir)) ? "" : "/";
    $out[] = $dir.$sep.$entry ;
  }
  return $out;
}

/* get highest temp of hard drives */
function get_highest_temp($hdds){
  $highest_temp = 0;
  foreach ($hdds as $hdd) {
    if (shell_exec("hdparm -C ${hdd} 2>/dev/null| grep -c standby") == 0){
      $temp = preg_replace("/\s+/", "", shell_exec("smartctl -A ${hdd} 2>/dev/null| grep -m 1 -i Temperature_Cel | awk '{print $10}'"));
      $highest_temp = ($temp > $highest_temp) ? $temp : $highest_temp;
    }
  }
  debug("Highest temp is ${highest_temp}ºC");
  return $highest_temp;
}

/* get all hard drives except flash drive */
function get_all_hdds(){
  $hdds = array();
  $flash = preg_replace("/\d$/", "", realpath("/dev/disk/by-label/UNRAID"));
  foreach (scan_dir("/dev/") as $dev) {
    if(preg_match("/[sh]d[a-z]+$/", $dev) && $dev != $flash) {
      $hdds[] = $dev;
    }
  }
  return $hdds;
}

/* get fan and temp sensors */
function ipmi_fan_sensors() {
    global $ipmi, $fanopts;

    // return empty array if no ipmi detected or network options
    if(!$ipmi && empty($fanopts))
        return [];

    $cmd = "/usr/sbin/ipmi-sensors --comma-separated-output --no-header-output --interpret-oem-data $fanopts 2>/dev/null";
    exec($cmd, $output, $return_var=null);

    // return empty array if error
    if($return_var)
        return [];

    // get highest hard drive temp and add sensor
    $hdds =  get_all_hdds();
    $hdd_temp = get_highest_temp($hdds);
    $output[] = "99,HDD Temperature,Temperature, $hdd_temp,C,Ok";

    // key names for ipmi sensors output
    $keys = ['ID', 'Name', 'Type', 'Reading', 'Units', 'Event'];
    $sensors = [];

    foreach($output as $line){

    /// add sensor keys as keys to ipmi sensor output
        $sensor_raw = explode(",", $line);
        $size_raw = sizeof($sensor_raw);
        $sensor = ($size_raw < 6) ? []: array_combine($keys, array_slice($sensor_raw,0,6,true));

        if ($sensor['Type'] == 'Temperature' || $sensor['Type'] == 'Fan')
            $sensors[$sensor['ID']] = $sensor;
    }
    return $sensors; // sensor readings
    unset($sensors);
}

##############################
#####  PROGRAM SECTION  ######
##############################

$fans = $board_json[$board]['fans'];
$MD5  = md5_file($fancfg_file);
fanlog('Starting Fan Control');

while(TRUE){ while(TRUE){
####  DO YOUR STUFF HERE  ####

    /* Get sensor info */
    $sensors = ipmi_fan_sensors();
    $hex = '';
    $msg = '';

    foreach($fans as $fan => $value){

        $temp = isset($fancfg["TEMP_$fan"]) ? $fancfg["TEMP_$fan"] : '';

        if(!empty($temp)) {
            $templo  = (isset($fancfg["TEMPLO_$fan"])) ? $fancfg["TEMPLO_$fan"]  : 30;
            $temphi  = (isset($fancfg["TEMPHI_$fan"])) ? $fancfg["TEMPHI_$fan"]  : 40;
            $fanmin  = (isset($fancfg["FANMIN_$fan"])) ? $fancfg["FANMIN_$fan"]  : 1;
            $reading = floatval($sensors[$temp]['Reading']);
            $name    = $sensors[$temp]['Name'];

            if ($reading <= $templo){
                $pct = 0;
                $pwm = 1;
            }elseif ($reading >= $temphi){
                $pct = 1;
                $pwm = 64;
            }else{
                $pct = ($reading-$templo)/($temphi-$templo);
                $pwm = round(($pct)*16)*4;
            }
            //impose fan lower limit
            if ($pwm <= $fanmin){
                $pwm  = $fanmin;
                $pct  = $fanmin/64;
            }

            //pad pwm to 2 places
            $pwm = str_pad($pwm, 2, '0', STR_PAD_LEFT);

            //add fan, value, temp sensor name and reading
            if(!empty($msg))
                $msg .= ',';
            $pct  = str_pad(round($pct*100), 2, ' ', STR_PAD_LEFT);
            $msg .= " $fan($pct%):$name(${reading}°C)";

       }else
            $pwm = '00';

    //add value to hex
    $hex .= " $pwm";
    }

    //compare last value to new value
    if($current_hex != $hex){
        $cmd = "ipmi-raw $raw$hex $fanopts 2>&1";
        shell_exec($cmd);

        //log changes
        fanlog($msg);
        $current_hex = $hex;
    }

    /* print variable */
    $defined_vars = get_defined_vars();

    //remove vars from array to save
    unset($defined_vars['current_hex'],$defined_vars['MD5']);

    foreach (array("_GET","_POST","_COOKIE","_FILES","argv","argc","_SERVER") as $i)
        unset($defined_vars[$i]);

    //add saved vars to array for debug print
    $defined_vars['current_hex'] = $current_hex;
    $defined_vars['MD5'] = $MD5;
    debug("\nDECLARED VARIABLES:\n".print_r($defined_vars, true));
    unset($defined_vars);

    $time1 = time();

    for ($i=0; $i < $fanpoll*6 ; $i++) {
        sleep(10);
        $MD5_new = md5_file($fancfg_file);
        if((file_exists($fancfg_file)) && ($MD5_new != $MD5)){
            $msg = 'fan control config file updated, reloading settings';
            $fancfg = parse_ini_file($fancfg_file);
            logger($msg, $argq);
            $MD5 = $MD5_new;
            fanlog($msg);
            break;
        }
    }
    debug("Sleep ".(time()-$time1)." seconds.");

######  END OF SECTION  ######
    };
};
?>