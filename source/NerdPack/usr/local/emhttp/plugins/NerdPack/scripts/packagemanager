#!/usr/bin/php -q
<?php
require_once("/usr/local/emhttp/plugins/NerdPack/include/DownloadHelpers.php");

function logger($output) {
	shell_exec( "echo '$output' 2>&1 | logger -tnerdpack");
	echo "\n".$output."\n";
	usleep(100000);
}

$config_file = "/boot/config/plugins/NerdPack/NerdPack.cfg";

$pkg_path ="/boot/config/plugins/NerdPack/packages/";

$pkg_cfg = (is_file($config_file)) ? parse_ini_file($config_file) : array(); // get package configs

$pkgs_downloaded = array_diff( scandir($pkg_path, 1), array(".", "..") ); // get array of packages

$pkgs_installed = array_diff( scandir("/var/log/packages", 1), array(".", "..") );

$pkgs_json = "/boot/config/plugins/NerdPack/packages.json";
$pkgs_file = (is_file($pkgs_json)) ? file_get_contents($pkgs_json) : array(); 

$pkgs_github = json_decode($pkgs_file, true);

logger("Processing Packages...");

foreach($pkg_cfg as $pkg_name => $pkg_pref) { //get preferences for each package

	$pkg_cmd = '';
	$pkg_name = str_replace("_", ".", $pkg_name); // replace "_" with "." in package names
	$pkg_pattern = "/^".$pkg_name.".*/"; // search patter for packages
	$pkg_install_status = preg_grep($pkg_pattern, $pkgs_installed); // check install status

	if($pkg_pref == "yes"){

		//if executing from the wegui check status and download if necessary
		if ($argv[1] == "download"){

			if(!preg_grep($pkg_pattern, $pkgs_downloaded)) {

				$pkg_online_status = preg_grep($pkg_pattern , $pkgs_github);

				$pkg_matches = array_filter($pkgs_github, function($a) use($pkg_pattern )  {
	    			return preg_grep($pkg_pattern , $a);
				});
				
				$pkg_gitname = array_values($pkg_matches)[0]["name"];
				$pkg_file = $pkg_path.$pkg_gitname;
				$pkg_url  = array_values($pkg_matches)[0]["download_url"];
				$pkg_sha  = array_values($pkg_matches)[0]["sha"];

				logger("Downloading $pkg_gitname package...");

				get_file_from_url($pkg_file, $pkg_url);

				if(file_check_sha($pkg_file, $pkg_sha))
					logger("$pkg_gitname package downloaded sucessfully!");
				else
					logger("$pkg_gitname package download failed!");
			}
		}
		if (!$pkg_install_status){
			$pkg_msg = "Installing";
			$pkg_cmd = "upgradepkg --install-new ".$pkg_path.$pkg_name."* 2>&1";
		}
	}elseif($pkg_pref == "no" && $pkg_install_status && $argv[2] == "remove"){

		$pkg_msg = "Removing";
		$pkg_cmd = "removepkg ".$pkg_path.$pkg_name."* 2>&1";
		if ($argv[3] == "delete"){
			$pkg_cmd .= "; rm ".$pkg_path.$pkg_name."* 2>&1";
			$pkg_msg .= " and deleting";
		}
	}
	if(!empty($pkg_cmd)){
		logger("$pkg_msg $pkg_name package...");
		usleep(100000);
		$output = shell_exec($pkg_cmd);
		logger($output);
		usleep(100000);
	}else
	logger($pkg_name." package up to date");
}

logger("All packages processed");
?>