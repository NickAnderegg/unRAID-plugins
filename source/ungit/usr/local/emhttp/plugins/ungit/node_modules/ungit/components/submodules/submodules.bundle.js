(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('submodules', function(args) {
  return new SubmodulesViewModel(args.server, args.repoPath);
});

function SubmodulesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.submodules = ko.observableArray();

  this.updateProgressBar = components.create('progressBar', { predictionMemoryKey: 'Updating Submodules', temporary: true });
  this.fetchProgressBar = components.create('progressBar', { predictionMemoryKey: 'Adding Submodule', temporary: true });
}

SubmodulesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'submodule-fetch') this.fetchSubmodules();
}

SubmodulesViewModel.prototype.updateNode = function(parentElement) {
  this.fetchSubmodules(function(submoduleViewModel) {
    ko.renderTemplate('submodules', submoduleViewModel, {}, parentElement);
  });
}

SubmodulesViewModel.prototype.fetchSubmodules = function(callback) {
  var self = this;

  this.server.get('/submodules', { path: this.repoPath() }, function(err, submodules) {
    // if returned is not array, don't render submodules module
    if (submodules && Array.isArray(submodules)) {
      self.submodules(submodules);
    } else {
      self.submodules([]);
    }

    if (callback) {
      callback(self);
    }
  });
}

SubmodulesViewModel.prototype.isRunning = function() {
  return (this.updateProgressBar.running() || this.fetchProgressBar.running());
}

SubmodulesViewModel.prototype.updateSubmodules = function() {
  if (this.isRunning()) return;
  var self = this;

  this.updateProgressBar.start();
  this.server.post('/submodules/update', { path: this.repoPath() }, function(err, result) {
    self.updateProgressBar.stop();
  });
}

SubmodulesViewModel.prototype.showAddSubmoduleDialog = function() {
  var self = this;
  var diag = components.create('addsubmoduledialog');
  diag.closed.add(function() {
    if (diag.isSubmitted()) {
      self.fetchProgressBar.start();
      self.server.post('/submodules/add', { path: self.repoPath(), submoduleUrl: diag.url(), submodulePath: diag.path() }, function(err, result) {
        if (err) {
          console.log(err);
          return;
        }

        programEvents.dispatch({ event: 'submodule-fetch' });
        self.fetchProgressBar.stop();
      });
    }
  });
  programEvents.dispatch({ event: 'request-show-dialog', dialog: diag });
}

SubmodulesViewModel.prototype.submoduleLinkClick = function(submodule) {
  window.location.href = submodule.url;
}

SubmodulesViewModel.prototype.submodulePathClick = function(submodule) {
  window.location.href = document.URL + '/' + submodule.path;
}

SubmodulesViewModel.prototype.submoduleRemove = function(submodule) {
  var self = this;
  var diag = components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + submodule.name + ' submodule cannot be undone with ungit.'});
  diag.closed.add(function() {
    if (diag.result()) {
      self.fetchProgressBar.start();
      self.server.del('/submodules', { path: self.repoPath(), submodulePath: submodule.path, submoduleName: submodule.name }, function(err, result) {
        if (err) {
          console.log(err);
          return;
        }

        programEvents.dispatch({ event: 'submodule-fetch' });
        self.fetchProgressBar.stop();
      });
    }
  });
  programEvents.dispatch({ event: 'request-show-dialog', dialog: diag });
}

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3N1Ym1vZHVsZXMvc3VibW9kdWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3Rlcignc3VibW9kdWxlcycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBTdWJtb2R1bGVzVmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnJlcG9QYXRoKTtcbn0pO1xuXG5mdW5jdGlvbiBTdWJtb2R1bGVzVmlld01vZGVsKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnN1Ym1vZHVsZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcblxuICB0aGlzLnVwZGF0ZVByb2dyZXNzQmFyID0gY29tcG9uZW50cy5jcmVhdGUoJ3Byb2dyZXNzQmFyJywgeyBwcmVkaWN0aW9uTWVtb3J5S2V5OiAnVXBkYXRpbmcgU3VibW9kdWxlcycsIHRlbXBvcmFyeTogdHJ1ZSB9KTtcbiAgdGhpcy5mZXRjaFByb2dyZXNzQmFyID0gY29tcG9uZW50cy5jcmVhdGUoJ3Byb2dyZXNzQmFyJywgeyBwcmVkaWN0aW9uTWVtb3J5S2V5OiAnQWRkaW5nIFN1Ym1vZHVsZScsIHRlbXBvcmFyeTogdHJ1ZSB9KTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUub25Qcm9ncmFtRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQuZXZlbnQgPT0gJ3N1Ym1vZHVsZS1mZXRjaCcpIHRoaXMuZmV0Y2hTdWJtb2R1bGVzKCk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIHRoaXMuZmV0Y2hTdWJtb2R1bGVzKGZ1bmN0aW9uKHN1Ym1vZHVsZVZpZXdNb2RlbCkge1xuICAgIGtvLnJlbmRlclRlbXBsYXRlKCdzdWJtb2R1bGVzJywgc3VibW9kdWxlVmlld01vZGVsLCB7fSwgcGFyZW50RWxlbWVudCk7XG4gIH0pO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS5mZXRjaFN1Ym1vZHVsZXMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5zZXJ2ZXIuZ2V0KCcvc3VibW9kdWxlcycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0sIGZ1bmN0aW9uKGVyciwgc3VibW9kdWxlcykge1xuICAgIC8vIGlmIHJldHVybmVkIGlzIG5vdCBhcnJheSwgZG9uJ3QgcmVuZGVyIHN1Ym1vZHVsZXMgbW9kdWxlXG4gICAgaWYgKHN1Ym1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShzdWJtb2R1bGVzKSkge1xuICAgICAgc2VsZi5zdWJtb2R1bGVzKHN1Ym1vZHVsZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnN1Ym1vZHVsZXMoW10pO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soc2VsZik7XG4gICAgfVxuICB9KTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUuaXNSdW5uaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy51cGRhdGVQcm9ncmVzc0Jhci5ydW5uaW5nKCkgfHwgdGhpcy5mZXRjaFByb2dyZXNzQmFyLnJ1bm5pbmcoKSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZVN1Ym1vZHVsZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpIHJldHVybjtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMudXBkYXRlUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdGhpcy5zZXJ2ZXIucG9zdCgnL3N1Ym1vZHVsZXMvdXBkYXRlJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICBzZWxmLnVwZGF0ZVByb2dyZXNzQmFyLnN0b3AoKTtcbiAgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnNob3dBZGRTdWJtb2R1bGVEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZGlhZyA9IGNvbXBvbmVudHMuY3JlYXRlKCdhZGRzdWJtb2R1bGVkaWFsb2cnKTtcbiAgZGlhZy5jbG9zZWQuYWRkKGZ1bmN0aW9uKCkge1xuICAgIGlmIChkaWFnLmlzU3VibWl0dGVkKCkpIHtcbiAgICAgIHNlbGYuZmV0Y2hQcm9ncmVzc0Jhci5zdGFydCgpO1xuICAgICAgc2VsZi5zZXJ2ZXIucG9zdCgnL3N1Ym1vZHVsZXMvYWRkJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHN1Ym1vZHVsZVVybDogZGlhZy51cmwoKSwgc3VibW9kdWxlUGF0aDogZGlhZy5wYXRoKCkgfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnc3VibW9kdWxlLWZldGNoJyB9KTtcbiAgICAgICAgc2VsZi5mZXRjaFByb2dyZXNzQmFyLnN0b3AoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3JlcXVlc3Qtc2hvdy1kaWFsb2cnLCBkaWFsb2c6IGRpYWcgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnN1Ym1vZHVsZUxpbmtDbGljayA9IGZ1bmN0aW9uKHN1Ym1vZHVsZSkge1xuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHN1Ym1vZHVsZS51cmw7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnN1Ym1vZHVsZVBhdGhDbGljayA9IGZ1bmN0aW9uKHN1Ym1vZHVsZSkge1xuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRvY3VtZW50LlVSTCArICcvJyArIHN1Ym1vZHVsZS5wYXRoO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS5zdWJtb2R1bGVSZW1vdmUgPSBmdW5jdGlvbihzdWJtb2R1bGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZGlhZyA9IGNvbXBvbmVudHMuY3JlYXRlKCd5ZXNub2RpYWxvZycsIHsgdGl0bGU6ICdBcmUgeW91IHN1cmU/JywgZGV0YWlsczogJ0RlbGV0aW5nICcgKyBzdWJtb2R1bGUubmFtZSArICcgc3VibW9kdWxlIGNhbm5vdCBiZSB1bmRvbmUgd2l0aCB1bmdpdC4nfSk7XG4gIGRpYWcuY2xvc2VkLmFkZChmdW5jdGlvbigpIHtcbiAgICBpZiAoZGlhZy5yZXN1bHQoKSkge1xuICAgICAgc2VsZi5mZXRjaFByb2dyZXNzQmFyLnN0YXJ0KCk7XG4gICAgICBzZWxmLnNlcnZlci5kZWwoJy9zdWJtb2R1bGVzJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHN1Ym1vZHVsZVBhdGg6IHN1Ym1vZHVsZS5wYXRoLCBzdWJtb2R1bGVOYW1lOiBzdWJtb2R1bGUubmFtZSB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICdzdWJtb2R1bGUtZmV0Y2gnIH0pO1xuICAgICAgICBzZWxmLmZldGNoUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAncmVxdWVzdC1zaG93LWRpYWxvZycsIGRpYWxvZzogZGlhZyB9KTtcbn1cbiJdfQ==
