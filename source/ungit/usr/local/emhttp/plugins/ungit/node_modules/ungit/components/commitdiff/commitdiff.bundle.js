(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ko = require('knockout');
var CommitLineDiff = require('./commitlinediff.js').CommitLineDiff;
var components = require('ungit-components');

components.register('commitDiff', function(args) {
  return new CommitDiff(args);
});

var CommitDiff = function(args) {
  this.commitLineDiffs = ko.observableArray();
  this.sha1 = args.sha1;
  args.fileLineDiffs.shift();  // remove first line that has "total"
  this.loadFileLineDiffs(args);
};

CommitDiff.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commitdiff', this, {}, parentElement);
};

CommitDiff.prototype.loadFileLineDiffs = function(args) {
  var tempCommitLineDiffs = [];
  var lineDiffLength = this.commitLineDiffs().length;

  args.fileLineDiffs.slice(lineDiffLength === 0 ? 0 : lineDiffLength + 1, this.maxNumberOfFilesShown).forEach(function(fileLineDiff) {
    tempCommitLineDiffs.push(new CommitLineDiff(args, fileLineDiff));
  });

  this.commitLineDiffs(this.commitLineDiffs().concat(tempCommitLineDiffs));
}

},{"./commitlinediff.js":2,"knockout":"knockout","ungit-components":"ungit-components"}],2:[function(require,module,exports){
var ko = require('knockout');
var components = require('ungit-components');
var inherits = require('util').inherits;
var programEvents = require('ungit-program-events');

var CommitLineDiff = function(args, fileLineDiff) {
  this.added = ko.observable(fileLineDiff[0]);
  this.removed = ko.observable(fileLineDiff[1]);
  this.fileName = ko.observable(fileLineDiff[2]);
  this.fileType = fileLineDiff[3];
  this.isShowingDiffs = ko.observable(false);
  this.repoPath = args.repoPath;
  this.server = args.server;
  this.sha1 = args.sha1;
  this.textDiffType = args.textDiffType;
  this.wordWrap = args.wordWrap;
  this.specificDiff = ko.observable(this.getSpecificDiff());
};
exports.CommitLineDiff = CommitLineDiff;

CommitLineDiff.prototype.getSpecificDiff = function() {
  return components.create(this.fileType + 'diff', {
    filename: this.fileName(),
    repoPath: this.repoPath,
    server: this.server,
    sha1: this.sha1,
    textDiffType: this.textDiffType,
    isShowingDiffs: this.isShowingDiffs,
    wordWrap: this.wordWrap
  });
}

CommitLineDiff.prototype.fileNameClick = function() {
  this.isShowingDiffs(!this.isShowingDiffs());
  this.specificDiff().invalidateDiff(function() {
    programEvents.dispatch({ event: 'graph-render' });
  });
};

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events","util":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdGRpZmYvY29tbWl0ZGlmZi5qcyIsImNvbXBvbmVudHMvY29tbWl0ZGlmZi9jb21taXRsaW5lZGlmZi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgQ29tbWl0TGluZURpZmYgPSByZXF1aXJlKCcuL2NvbW1pdGxpbmVkaWZmLmpzJykuQ29tbWl0TGluZURpZmY7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignY29tbWl0RGlmZicsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBDb21taXREaWZmKGFyZ3MpO1xufSk7XG5cbnZhciBDb21taXREaWZmID0gZnVuY3Rpb24oYXJncykge1xuICB0aGlzLmNvbW1pdExpbmVEaWZmcyA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xuICB0aGlzLnNoYTEgPSBhcmdzLnNoYTE7XG4gIGFyZ3MuZmlsZUxpbmVEaWZmcy5zaGlmdCgpOyAgLy8gcmVtb3ZlIGZpcnN0IGxpbmUgdGhhdCBoYXMgXCJ0b3RhbFwiXG4gIHRoaXMubG9hZEZpbGVMaW5lRGlmZnMoYXJncyk7XG59O1xuXG5Db21taXREaWZmLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnY29tbWl0ZGlmZicsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn07XG5cbkNvbW1pdERpZmYucHJvdG90eXBlLmxvYWRGaWxlTGluZURpZmZzID0gZnVuY3Rpb24oYXJncykge1xuICB2YXIgdGVtcENvbW1pdExpbmVEaWZmcyA9IFtdO1xuICB2YXIgbGluZURpZmZMZW5ndGggPSB0aGlzLmNvbW1pdExpbmVEaWZmcygpLmxlbmd0aDtcblxuICBhcmdzLmZpbGVMaW5lRGlmZnMuc2xpY2UobGluZURpZmZMZW5ndGggPT09IDAgPyAwIDogbGluZURpZmZMZW5ndGggKyAxLCB0aGlzLm1heE51bWJlck9mRmlsZXNTaG93bikuZm9yRWFjaChmdW5jdGlvbihmaWxlTGluZURpZmYpIHtcbiAgICB0ZW1wQ29tbWl0TGluZURpZmZzLnB1c2gobmV3IENvbW1pdExpbmVEaWZmKGFyZ3MsIGZpbGVMaW5lRGlmZikpO1xuICB9KTtcblxuICB0aGlzLmNvbW1pdExpbmVEaWZmcyh0aGlzLmNvbW1pdExpbmVEaWZmcygpLmNvbmNhdCh0ZW1wQ29tbWl0TGluZURpZmZzKSk7XG59XG4iLCJ2YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG5cbnZhciBDb21taXRMaW5lRGlmZiA9IGZ1bmN0aW9uKGFyZ3MsIGZpbGVMaW5lRGlmZikge1xuICB0aGlzLmFkZGVkID0ga28ub2JzZXJ2YWJsZShmaWxlTGluZURpZmZbMF0pO1xuICB0aGlzLnJlbW92ZWQgPSBrby5vYnNlcnZhYmxlKGZpbGVMaW5lRGlmZlsxXSk7XG4gIHRoaXMuZmlsZU5hbWUgPSBrby5vYnNlcnZhYmxlKGZpbGVMaW5lRGlmZlsyXSk7XG4gIHRoaXMuZmlsZVR5cGUgPSBmaWxlTGluZURpZmZbM107XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgdGhpcy5yZXBvUGF0aCA9IGFyZ3MucmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gYXJncy5zZXJ2ZXI7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy50ZXh0RGlmZlR5cGUgPSBhcmdzLnRleHREaWZmVHlwZTtcbiAgdGhpcy53b3JkV3JhcCA9IGFyZ3Mud29yZFdyYXA7XG4gIHRoaXMuc3BlY2lmaWNEaWZmID0ga28ub2JzZXJ2YWJsZSh0aGlzLmdldFNwZWNpZmljRGlmZigpKTtcbn07XG5leHBvcnRzLkNvbW1pdExpbmVEaWZmID0gQ29tbWl0TGluZURpZmY7XG5cbkNvbW1pdExpbmVEaWZmLnByb3RvdHlwZS5nZXRTcGVjaWZpY0RpZmYgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbXBvbmVudHMuY3JlYXRlKHRoaXMuZmlsZVR5cGUgKyAnZGlmZicsIHtcbiAgICBmaWxlbmFtZTogdGhpcy5maWxlTmFtZSgpLFxuICAgIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoLFxuICAgIHNlcnZlcjogdGhpcy5zZXJ2ZXIsXG4gICAgc2hhMTogdGhpcy5zaGExLFxuICAgIHRleHREaWZmVHlwZTogdGhpcy50ZXh0RGlmZlR5cGUsXG4gICAgaXNTaG93aW5nRGlmZnM6IHRoaXMuaXNTaG93aW5nRGlmZnMsXG4gICAgd29yZFdyYXA6IHRoaXMud29yZFdyYXBcbiAgfSk7XG59XG5cbkNvbW1pdExpbmVEaWZmLnByb3RvdHlwZS5maWxlTmFtZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMoIXRoaXMuaXNTaG93aW5nRGlmZnMoKSk7XG4gIHRoaXMuc3BlY2lmaWNEaWZmKCkuaW52YWxpZGF0ZURpZmYoZnVuY3Rpb24oKSB7XG4gICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnZ3JhcGgtcmVuZGVyJyB9KTtcbiAgfSk7XG59O1xuIl19
