(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var addressParser = require('ungit-address-parser');
var navigation = require('ungit-navigation');
var programEvents = require('ungit-program-events');

components.register('path', function(args) {
  return new PathViewModel(args.server, args.path);
});

var PathViewModel = function(server, path) {
  var self = this;
  this.server = server;
  this.repoPath = ko.observable(path);
  this.dirName = this.repoPath().replace('\\', '/')
                   .split('/')
                   .filter(function(s) { return s; })
                   .slice(-1)[0] || '/';

  this.status = ko.observable('loading');
  this.loadingProgressBar = components.create('progressBar', { predictionMemoryKey: 'path-loading-' + path });
  this.loadingProgressBar.start();
  this.cloningProgressBar = components.create('progressBar', {
    predictionMemoryKey: 'path-cloning-' + path,
    fallbackPredictedTimeMs: 10000
  });
  this.cloneUrl = ko.observable();
  this.showDirectoryCreatedAlert = ko.observable(false);
  this.cloneDestinationImplicit = ko.computed(function() {
    var defaultText = 'destination folder';
    if (!self.cloneUrl()) return defaultText;

    var parsedAddress = addressParser.parseAddress(self.cloneUrl());
    return parsedAddress.shortProject || defaultText;
  });
  this.cloneDestination = ko.observable();
  this.repository = ko.observable();
}
PathViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('path', this, {}, parentElement);
}
PathViewModel.prototype.template = 'path';
PathViewModel.prototype.shown = function() {
  this.updateStatus();
}
PathViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.repository())
    this.repository().updateAnimationFrame(deltaT);
}
PathViewModel.prototype.updateStatus = function() {
  var self = this;
  this.server.get('/quickstatus', { path: this.repoPath() }, function(err, status){
    self.loadingProgressBar.stop();
    if (err) return;
    if (status.type == 'inited' || status.type == 'bare') {
      if (self.repoPath() !== status.gitRootPath) {
        self.repoPath(status.gitRootPath);
        programEvents.dispatch({ event: 'navigated-to-path', path: self.repoPath() });
        programEvents.dispatch({ event: 'working-tree-changed' });
      }
      self.status(status.type);
      if (!self.repository()) {
        self.repository(components.create('repository', { server: self.server, path: self }));
      }
    } else if (status.type == 'uninited' || status.type == 'no-such-path') {
      self.status(status.type);
      self.repository(null);
    }
  });
}
PathViewModel.prototype.initRepository = function() {
  var self = this;
  this.server.post('/init', { path: this.repoPath() }, function(err, res) {
    if (err) return;
    self.updateStatus();
  });
}
PathViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-credentials') this.cloningProgressBar.pause();
  else if (event.event == 'request-credentials-response') this.cloningProgressBar.unpause();
  else if (event.event == 'working-tree-changed') this.updateStatus();
  else if (event.event == 'request-app-content-refresh') this.updateStatus();

  if (this.repository()) this.repository().onProgramEvent(event);
}
PathViewModel.prototype.cloneRepository = function() {
  var self = this;
  self.status('cloning');
  this.cloningProgressBar.start();
  var dest = this.cloneDestination() || this.cloneDestinationImplicit();

  this.server.post('/clone', { path: this.repoPath(), url: this.cloneUrl(), destinationDir: dest }, function(err, res) {
    self.cloningProgressBar.stop();
    if (err) return;
    navigation.browseTo('repository?path=' + encodeURIComponent(res.path));
  });
}
PathViewModel.prototype.createDir = function() {
  var self = this;
  this.showDirectoryCreatedAlert(true);
  this.server.post('/createDir',  { dir: this.repoPath() }, function() {
    self.updateStatus();
  });
}

},{"knockout":"knockout","ungit-address-parser":"ungit-address-parser","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3BhdGgvcGF0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIGFkZHJlc3NQYXJzZXIgPSByZXF1aXJlKCd1bmdpdC1hZGRyZXNzLXBhcnNlcicpO1xudmFyIG5hdmlnYXRpb24gPSByZXF1aXJlKCd1bmdpdC1uYXZpZ2F0aW9uJyk7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ3BhdGgnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgUGF0aFZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5wYXRoKTtcbn0pO1xuXG52YXIgUGF0aFZpZXdNb2RlbCA9IGZ1bmN0aW9uKHNlcnZlciwgcGF0aCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnJlcG9QYXRoID0ga28ub2JzZXJ2YWJsZShwYXRoKTtcbiAgdGhpcy5kaXJOYW1lID0gdGhpcy5yZXBvUGF0aCgpLnJlcGxhY2UoJ1xcXFwnLCAnLycpXG4gICAgICAgICAgICAgICAgICAgLnNwbGl0KCcvJylcbiAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHM7IH0pXG4gICAgICAgICAgICAgICAgICAgLnNsaWNlKC0xKVswXSB8fCAnLyc7XG5cbiAgdGhpcy5zdGF0dXMgPSBrby5vYnNlcnZhYmxlKCdsb2FkaW5nJyk7XG4gIHRoaXMubG9hZGluZ1Byb2dyZXNzQmFyID0gY29tcG9uZW50cy5jcmVhdGUoJ3Byb2dyZXNzQmFyJywgeyBwcmVkaWN0aW9uTWVtb3J5S2V5OiAncGF0aC1sb2FkaW5nLScgKyBwYXRoIH0pO1xuICB0aGlzLmxvYWRpbmdQcm9ncmVzc0Jhci5zdGFydCgpO1xuICB0aGlzLmNsb25pbmdQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHtcbiAgICBwcmVkaWN0aW9uTWVtb3J5S2V5OiAncGF0aC1jbG9uaW5nLScgKyBwYXRoLFxuICAgIGZhbGxiYWNrUHJlZGljdGVkVGltZU1zOiAxMDAwMFxuICB9KTtcbiAgdGhpcy5jbG9uZVVybCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5zaG93RGlyZWN0b3J5Q3JlYXRlZEFsZXJ0ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuY2xvbmVEZXN0aW5hdGlvbkltcGxpY2l0ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRUZXh0ID0gJ2Rlc3RpbmF0aW9uIGZvbGRlcic7XG4gICAgaWYgKCFzZWxmLmNsb25lVXJsKCkpIHJldHVybiBkZWZhdWx0VGV4dDtcblxuICAgIHZhciBwYXJzZWRBZGRyZXNzID0gYWRkcmVzc1BhcnNlci5wYXJzZUFkZHJlc3Moc2VsZi5jbG9uZVVybCgpKTtcbiAgICByZXR1cm4gcGFyc2VkQWRkcmVzcy5zaG9ydFByb2plY3QgfHwgZGVmYXVsdFRleHQ7XG4gIH0pO1xuICB0aGlzLmNsb25lRGVzdGluYXRpb24gPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMucmVwb3NpdG9yeSA9IGtvLm9ic2VydmFibGUoKTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdwYXRoJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUudGVtcGxhdGUgPSAncGF0aCc7XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS5zaG93biA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihkZWx0YVQpIHtcbiAgaWYgKHRoaXMucmVwb3NpdG9yeSgpKVxuICAgIHRoaXMucmVwb3NpdG9yeSgpLnVwZGF0ZUFuaW1hdGlvbkZyYW1lKGRlbHRhVCk7XG59XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlci5nZXQoJy9xdWlja3N0YXR1cycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0sIGZ1bmN0aW9uKGVyciwgc3RhdHVzKXtcbiAgICBzZWxmLmxvYWRpbmdQcm9ncmVzc0Jhci5zdG9wKCk7XG4gICAgaWYgKGVycikgcmV0dXJuO1xuICAgIGlmIChzdGF0dXMudHlwZSA9PSAnaW5pdGVkJyB8fCBzdGF0dXMudHlwZSA9PSAnYmFyZScpIHtcbiAgICAgIGlmIChzZWxmLnJlcG9QYXRoKCkgIT09IHN0YXR1cy5naXRSb290UGF0aCkge1xuICAgICAgICBzZWxmLnJlcG9QYXRoKHN0YXR1cy5naXRSb290UGF0aCk7XG4gICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ25hdmlnYXRlZC10by1wYXRoJywgcGF0aDogc2VsZi5yZXBvUGF0aCgpIH0pO1xuICAgICAgICBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcgfSk7XG4gICAgICB9XG4gICAgICBzZWxmLnN0YXR1cyhzdGF0dXMudHlwZSk7XG4gICAgICBpZiAoIXNlbGYucmVwb3NpdG9yeSgpKSB7XG4gICAgICAgIHNlbGYucmVwb3NpdG9yeShjb21wb25lbnRzLmNyZWF0ZSgncmVwb3NpdG9yeScsIHsgc2VydmVyOiBzZWxmLnNlcnZlciwgcGF0aDogc2VsZiB9KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0dXMudHlwZSA9PSAndW5pbml0ZWQnIHx8IHN0YXR1cy50eXBlID09ICduby1zdWNoLXBhdGgnKSB7XG4gICAgICBzZWxmLnN0YXR1cyhzdGF0dXMudHlwZSk7XG4gICAgICBzZWxmLnJlcG9zaXRvcnkobnVsbCk7XG4gICAgfVxuICB9KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLmluaXRSZXBvc2l0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIucG9zdCgnL2luaXQnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9LCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICBzZWxmLnVwZGF0ZVN0YXR1cygpO1xuICB9KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWNyZWRlbnRpYWxzJykgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIucGF1c2UoKTtcbiAgZWxzZSBpZiAoZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtY3JlZGVudGlhbHMtcmVzcG9uc2UnKSB0aGlzLmNsb25pbmdQcm9ncmVzc0Jhci51bnBhdXNlKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcpIHRoaXMudXBkYXRlU3RhdHVzKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWFwcC1jb250ZW50LXJlZnJlc2gnKSB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuXG4gIGlmICh0aGlzLnJlcG9zaXRvcnkoKSkgdGhpcy5yZXBvc2l0b3J5KCkub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuY2xvbmVSZXBvc2l0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5zdGF0dXMoJ2Nsb25pbmcnKTtcbiAgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdmFyIGRlc3QgPSB0aGlzLmNsb25lRGVzdGluYXRpb24oKSB8fCB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCgpO1xuXG4gIHRoaXMuc2VydmVyLnBvc3QoJy9jbG9uZScsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpLCB1cmw6IHRoaXMuY2xvbmVVcmwoKSwgZGVzdGluYXRpb25EaXI6IGRlc3QgfSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICBzZWxmLmNsb25pbmdQcm9ncmVzc0Jhci5zdG9wKCk7XG4gICAgaWYgKGVycikgcmV0dXJuO1xuICAgIG5hdmlnYXRpb24uYnJvd3NlVG8oJ3JlcG9zaXRvcnk/cGF0aD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlcy5wYXRoKSk7XG4gIH0pO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuY3JlYXRlRGlyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zaG93RGlyZWN0b3J5Q3JlYXRlZEFsZXJ0KHRydWUpO1xuICB0aGlzLnNlcnZlci5wb3N0KCcvY3JlYXRlRGlyJywgIHsgZGlyOiB0aGlzLnJlcG9QYXRoKCkgfSwgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi51cGRhdGVTdGF0dXMoKTtcbiAgfSk7XG59XG4iXX0=
