(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var async = require('async');
var _ = require('lodash');

components.register('repository', function(args) {
  return new RepositoryViewModel(args.server, args.path);
});

var RepositoryViewModel = function(server, path) {
  var self = this;

  this.server = server;
  this.isBareDir = path.status() === 'bare';
  this.repoPath = path.repoPath;
  this.gitErrors = components.create('gitErrors', { server: server, repoPath: this.repoPath });
  this.graph = components.create('graph', { server: server, repoPath: this.repoPath });
  this.remotes = components.create('remotes', { server: server, repoPath: this.repoPath });
  this.submodules = components.create('submodules', { server: server, repoPath: this.repoPath });
  this.stash = this.isBareDir ? {} : components.create('stash', { server: server, repoPath: this.repoPath });
  this.staging = this.isBareDir ? {} : components.create('staging', { server: server, repoPath: this.repoPath });
  this.branches = components.create('branches', { server: server, repoPath: this.repoPath });
  this.repoPath.subscribe(function(value) { self.sever.watchRepository(value); });
  this.server.watchRepository(this.repoPath());
  this.showLog = self.isBareDir ? ko.observable(true) : self.staging.isStageValid;
  this.isSubmodule = ko.observable(false);
  this.parentModulePath = ko.observable();
  this.parentModuleLink = ko.observable();
  this.refreshSubmoduleStatus();
  if (window.location.search.indexOf('noheader=true') >= 0) {
    this.refreshButton = components.create('refreshbutton');
  } else {
    this.refreshButton = false;
  }
}
RepositoryViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('repository', this, {}, parentElement);
}
RepositoryViewModel.prototype.onProgramEvent = function(event) {
  if (this.gitErrors.onProgramEvent) this.gitErrors.onProgramEvent(event);
  if (this.graph.onProgramEvent) this.graph.onProgramEvent(event);
  if (this.staging.onProgramEvent) this.staging.onProgramEvent(event);
  if (this.stash.onProgramEvent) this.stash.onProgramEvent(event);
  if (this.remotes.onProgramEvent) this.remotes.onProgramEvent(event);
  if (this.submodules.onProgramEvent) this.submodules.onProgramEvent(event);
  if (this.branches.onProgramEvent) this.branches.onProgramEvent(event);
  if (event.event == 'connected') this.server.watchRepository(this.repoPath());

  // If we get a reconnect event it's usually because the server crashed and then restarted
  // or something like that, so we need to tell it to start watching the path again
}
RepositoryViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.graph.updateAnimationFrame) this.graph.updateAnimationFrame(deltaT);
}
RepositoryViewModel.prototype.refreshSubmoduleStatus = function() {
  var self = this;
  this.server.get('/baserepopath', { path: this.repoPath() }, function(err, baseRepoPath) {
    if (err || !baseRepoPath.path) {
      self.isSubmodule(false);
      return true;
    }

    self.server.get('/submodules', { path: baseRepoPath.path }, function(err, submodules) {
      if (!err && Array.isArray(submodules)) {
        var baseName = self.repoPath().replace(/^.*[\\\/]/, '');

        for (var n = 0; n < submodules.length; n++) {
          if (submodules[n].path === baseName) {
            self.isSubmodule(true);
            self.parentModulePath(baseRepoPath.path);
            self.parentModuleLink('/#/repository?path=' + encodeURIComponent(baseRepoPath.path));
            return;
          }
        }
      }

      self.isSubmodule(false);
      return true;
    });
  });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcigncmVwb3NpdG9yeScsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBSZXBvc2l0b3J5Vmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnBhdGgpO1xufSk7XG5cbnZhciBSZXBvc2l0b3J5Vmlld01vZGVsID0gZnVuY3Rpb24oc2VydmVyLCBwYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5pc0JhcmVEaXIgPSBwYXRoLnN0YXR1cygpID09PSAnYmFyZSc7XG4gIHRoaXMucmVwb1BhdGggPSBwYXRoLnJlcG9QYXRoO1xuICB0aGlzLmdpdEVycm9ycyA9IGNvbXBvbmVudHMuY3JlYXRlKCdnaXRFcnJvcnMnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgdGhpcy5ncmFwaCA9IGNvbXBvbmVudHMuY3JlYXRlKCdncmFwaCcsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICB0aGlzLnJlbW90ZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgncmVtb3RlcycsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICB0aGlzLnN1Ym1vZHVsZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgnc3VibW9kdWxlcycsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICB0aGlzLnN0YXNoID0gdGhpcy5pc0JhcmVEaXIgPyB7fSA6IGNvbXBvbmVudHMuY3JlYXRlKCdzdGFzaCcsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICB0aGlzLnN0YWdpbmcgPSB0aGlzLmlzQmFyZURpciA/IHt9IDogY29tcG9uZW50cy5jcmVhdGUoJ3N0YWdpbmcnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogdGhpcy5yZXBvUGF0aCB9KTtcbiAgdGhpcy5icmFuY2hlcyA9IGNvbXBvbmVudHMuY3JlYXRlKCdicmFuY2hlcycsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiB0aGlzLnJlcG9QYXRoIH0pO1xuICB0aGlzLnJlcG9QYXRoLnN1YnNjcmliZShmdW5jdGlvbih2YWx1ZSkgeyBzZWxmLnNldmVyLndhdGNoUmVwb3NpdG9yeSh2YWx1ZSk7IH0pO1xuICB0aGlzLnNlcnZlci53YXRjaFJlcG9zaXRvcnkodGhpcy5yZXBvUGF0aCgpKTtcbiAgdGhpcy5zaG93TG9nID0gc2VsZi5pc0JhcmVEaXIgPyBrby5vYnNlcnZhYmxlKHRydWUpIDogc2VsZi5zdGFnaW5nLmlzU3RhZ2VWYWxpZDtcbiAgdGhpcy5pc1N1Ym1vZHVsZSA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLnBhcmVudE1vZHVsZVBhdGggPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMucGFyZW50TW9kdWxlTGluayA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5yZWZyZXNoU3VibW9kdWxlU3RhdHVzKCk7XG4gIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ25vaGVhZGVyPXRydWUnKSA+PSAwKSB7XG4gICAgdGhpcy5yZWZyZXNoQnV0dG9uID0gY29tcG9uZW50cy5jcmVhdGUoJ3JlZnJlc2hidXR0b24nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlZnJlc2hCdXR0b24gPSBmYWxzZTtcbiAgfVxufVxuUmVwb3NpdG9yeVZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ3JlcG9zaXRvcnknLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59XG5SZXBvc2l0b3J5Vmlld01vZGVsLnByb3RvdHlwZS5vblByb2dyYW1FdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmICh0aGlzLmdpdEVycm9ycy5vblByb2dyYW1FdmVudCkgdGhpcy5naXRFcnJvcnMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICBpZiAodGhpcy5ncmFwaC5vblByb2dyYW1FdmVudCkgdGhpcy5ncmFwaC5vblByb2dyYW1FdmVudChldmVudCk7XG4gIGlmICh0aGlzLnN0YWdpbmcub25Qcm9ncmFtRXZlbnQpIHRoaXMuc3RhZ2luZy5vblByb2dyYW1FdmVudChldmVudCk7XG4gIGlmICh0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMucmVtb3Rlcy5vblByb2dyYW1FdmVudCkgdGhpcy5yZW1vdGVzLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuc3VibW9kdWxlcy5vblByb2dyYW1FdmVudCkgdGhpcy5zdWJtb2R1bGVzLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQpIHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICBpZiAoZXZlbnQuZXZlbnQgPT0gJ2Nvbm5lY3RlZCcpIHRoaXMuc2VydmVyLndhdGNoUmVwb3NpdG9yeSh0aGlzLnJlcG9QYXRoKCkpO1xuXG4gIC8vIElmIHdlIGdldCBhIHJlY29ubmVjdCBldmVudCBpdCdzIHVzdWFsbHkgYmVjYXVzZSB0aGUgc2VydmVyIGNyYXNoZWQgYW5kIHRoZW4gcmVzdGFydGVkXG4gIC8vIG9yIHNvbWV0aGluZyBsaWtlIHRoYXQsIHNvIHdlIG5lZWQgdG8gdGVsbCBpdCB0byBzdGFydCB3YXRjaGluZyB0aGUgcGF0aCBhZ2FpblxufVxuUmVwb3NpdG9yeVZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihkZWx0YVQpIHtcbiAgaWYgKHRoaXMuZ3JhcGgudXBkYXRlQW5pbWF0aW9uRnJhbWUpIHRoaXMuZ3JhcGgudXBkYXRlQW5pbWF0aW9uRnJhbWUoZGVsdGFUKTtcbn1cblJlcG9zaXRvcnlWaWV3TW9kZWwucHJvdG90eXBlLnJlZnJlc2hTdWJtb2R1bGVTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlci5nZXQoJy9iYXNlcmVwb3BhdGgnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9LCBmdW5jdGlvbihlcnIsIGJhc2VSZXBvUGF0aCkge1xuICAgIGlmIChlcnIgfHwgIWJhc2VSZXBvUGF0aC5wYXRoKSB7XG4gICAgICBzZWxmLmlzU3VibW9kdWxlKGZhbHNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNlbGYuc2VydmVyLmdldCgnL3N1Ym1vZHVsZXMnLCB7IHBhdGg6IGJhc2VSZXBvUGF0aC5wYXRoIH0sIGZ1bmN0aW9uKGVyciwgc3VibW9kdWxlcykge1xuICAgICAgaWYgKCFlcnIgJiYgQXJyYXkuaXNBcnJheShzdWJtb2R1bGVzKSkge1xuICAgICAgICB2YXIgYmFzZU5hbWUgPSBzZWxmLnJlcG9QYXRoKCkucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpO1xuXG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgc3VibW9kdWxlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgIGlmIChzdWJtb2R1bGVzW25dLnBhdGggPT09IGJhc2VOYW1lKSB7XG4gICAgICAgICAgICBzZWxmLmlzU3VibW9kdWxlKHRydWUpO1xuICAgICAgICAgICAgc2VsZi5wYXJlbnRNb2R1bGVQYXRoKGJhc2VSZXBvUGF0aC5wYXRoKTtcbiAgICAgICAgICAgIHNlbGYucGFyZW50TW9kdWxlTGluaygnLyMvcmVwb3NpdG9yeT9wYXRoPScgKyBlbmNvZGVVUklDb21wb25lbnQoYmFzZVJlcG9QYXRoLnBhdGgpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc1N1Ym1vZHVsZShmYWxzZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
