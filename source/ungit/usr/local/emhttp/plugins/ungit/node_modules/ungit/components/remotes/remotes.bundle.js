(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var _ = require('lodash');
var async = require('async');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('remotes', function(args) {
  return new RemotesViewModel(args.server, args.repoPath);
});

function RemotesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.remotes = ko.observable([]);
  this.currentRemote = ko.observable(null);
  this.currentRemote.subscribe(function(value) {
    programEvents.dispatch({ event: 'current-remote-changed', newRemote: value });
  });
  this.fetchLabel = ko.computed(function() {
    if (self.currentRemote()) return 'Fetch from ' + self.currentRemote();
    else return 'No remotes specified';
  })

  this.fetchingProgressBar = components.create('progressBar', { predictionMemoryKey: 'fetching-' + this.repoPath(), temporary: true });

  this.fetchEnabled = ko.computed(function() {
    return self.remotes().length > 0;
  });

  this.shouldAutoFetch = ungit.config.autoFetch;
  this.updateRemotes();
}
RemotesViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('remotes', this, {}, parentElement);
}
RemotesViewModel.prototype.clickFetch = function() { this.fetch({ nodes: true, tags: true }); }
RemotesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-credentials') this.fetchingProgressBar.pause();
  else if (event.event == 'request-credentials-response') this.fetchingProgressBar.unpause();
  else if (event.event == 'request-fetch-tags') this.fetch({ tags: true });
}
RemotesViewModel.prototype.fetch = function(options) {
  if (this.fetchingProgressBar.running()) return;
  var self = this;

  this.fetchingProgressBar.start();
  var jobs = [];
  if (options.tags) jobs.push(function(done) { self.server.get('/remote/tags', { path: self.repoPath(), remote: self.currentRemote() }, done); });
  if (options.nodes) jobs.push(function(done) { self.server.post('/fetch', { path: self.repoPath(), remote: self.currentRemote() }, done);  });
  async.parallel(jobs, function(err, result) {
    self.fetchingProgressBar.stop();

    if (!err && options.tags) programEvents.dispatch({ event: 'remote-tags-update', tags: result[0] });
  });
}

RemotesViewModel.prototype.updateRemotes = function() {
  var self = this;
  this.server.get('/remotes', { path: this.repoPath() }, function(err, remotes) {
    if (err && err.errorCode == 'not-a-repository') return true;
    if (err) return;
    remotes = remotes.map(function(remote) {
      return {
        name: remote,
        changeRemote: function() { self.currentRemote(remote) }
      }
    });
    self.remotes(remotes);
    if (!self.currentRemote() && remotes.length > 0) {
      if (_.find(remotes, { 'name': 'origin' })) // default to origin if it exists
        self.currentRemote('origin');
      else // otherwise take the first one
        self.currentRemote(remotes[0].name);
      if (self.shouldAutoFetch) {
        self.fetch({ nodes: true, tags: true });
      }
    }
    self.shouldAutoFetch = false;
  });
}
RemotesViewModel.prototype.showAddRemoteDialog = function() {
  var self = this;
  var diag = components.create('addremotedialog');
  diag.closed.add(function() {
    if (diag.isSubmitted()) {
      self.server.post('/remotes/' + encodeURIComponent(diag.name()), { path: self.repoPath(), url: diag.url() }, function(err, res) {
        if (err) return;
        self.updateRemotes();
      })
    }
  });
  programEvents.dispatch({ event: 'request-show-dialog', dialog: diag });
}

RemotesViewModel.prototype.remoteRemove = function(remote) {
  var self = this;
  var diag = components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + remote.name + ' remote cannot be undone with ungit.'});
  diag.closed.add(function() {
    if (diag.result()) {
      self.fetchingProgressBar.start();
      self.server.del('/remotes/' + remote.name, { path: self.repoPath() }, function(err, result) {
        if (err) {
          console.log(err);
          return;
        }

        self.updateRemotes();
        self.fetchingProgressBar.stop();
      });
    }
  });
  programEvents.dispatch({ event: 'request-show-dialog', dialog: diag });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlbW90ZXMvcmVtb3Rlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcigncmVtb3RlcycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBSZW1vdGVzVmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnJlcG9QYXRoKTtcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdGVzVmlld01vZGVsKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnJlbW90ZXMgPSBrby5vYnNlcnZhYmxlKFtdKTtcbiAgdGhpcy5jdXJyZW50UmVtb3RlID0ga28ub2JzZXJ2YWJsZShudWxsKTtcbiAgdGhpcy5jdXJyZW50UmVtb3RlLnN1YnNjcmliZShmdW5jdGlvbih2YWx1ZSkge1xuICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ2N1cnJlbnQtcmVtb3RlLWNoYW5nZWQnLCBuZXdSZW1vdGU6IHZhbHVlIH0pO1xuICB9KTtcbiAgdGhpcy5mZXRjaExhYmVsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuY3VycmVudFJlbW90ZSgpKSByZXR1cm4gJ0ZldGNoIGZyb20gJyArIHNlbGYuY3VycmVudFJlbW90ZSgpO1xuICAgIGVsc2UgcmV0dXJuICdObyByZW1vdGVzIHNwZWNpZmllZCc7XG4gIH0pXG5cbiAgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyID0gY29tcG9uZW50cy5jcmVhdGUoJ3Byb2dyZXNzQmFyJywgeyBwcmVkaWN0aW9uTWVtb3J5S2V5OiAnZmV0Y2hpbmctJyArIHRoaXMucmVwb1BhdGgoKSwgdGVtcG9yYXJ5OiB0cnVlIH0pO1xuXG4gIHRoaXMuZmV0Y2hFbmFibGVkID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYucmVtb3RlcygpLmxlbmd0aCA+IDA7XG4gIH0pO1xuXG4gIHRoaXMuc2hvdWxkQXV0b0ZldGNoID0gdW5naXQuY29uZmlnLmF1dG9GZXRjaDtcbiAgdGhpcy51cGRhdGVSZW1vdGVzKCk7XG59XG5SZW1vdGVzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgncmVtb3RlcycsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblJlbW90ZXNWaWV3TW9kZWwucHJvdG90eXBlLmNsaWNrRmV0Y2ggPSBmdW5jdGlvbigpIHsgdGhpcy5mZXRjaCh7IG5vZGVzOiB0cnVlLCB0YWdzOiB0cnVlIH0pOyB9XG5SZW1vdGVzVmlld01vZGVsLnByb3RvdHlwZS5vblByb2dyYW1FdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5ldmVudCA9PSAncmVxdWVzdC1jcmVkZW50aWFscycpIHRoaXMuZmV0Y2hpbmdQcm9ncmVzc0Jhci5wYXVzZSgpO1xuICBlbHNlIGlmIChldmVudC5ldmVudCA9PSAncmVxdWVzdC1jcmVkZW50aWFscy1yZXNwb25zZScpIHRoaXMuZmV0Y2hpbmdQcm9ncmVzc0Jhci51bnBhdXNlKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWZldGNoLXRhZ3MnKSB0aGlzLmZldGNoKHsgdGFnczogdHJ1ZSB9KTtcbn1cblJlbW90ZXNWaWV3TW9kZWwucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAodGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnJ1bm5pbmcoKSkgcmV0dXJuO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0YXJ0KCk7XG4gIHZhciBqb2JzID0gW107XG4gIGlmIChvcHRpb25zLnRhZ3MpIGpvYnMucHVzaChmdW5jdGlvbihkb25lKSB7IHNlbGYuc2VydmVyLmdldCgnL3JlbW90ZS90YWdzJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHJlbW90ZTogc2VsZi5jdXJyZW50UmVtb3RlKCkgfSwgZG9uZSk7IH0pO1xuICBpZiAob3B0aW9ucy5ub2Rlcykgam9icy5wdXNoKGZ1bmN0aW9uKGRvbmUpIHsgc2VsZi5zZXJ2ZXIucG9zdCgnL2ZldGNoJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHJlbW90ZTogc2VsZi5jdXJyZW50UmVtb3RlKCkgfSwgZG9uZSk7ICB9KTtcbiAgYXN5bmMucGFyYWxsZWwoam9icywgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICBzZWxmLmZldGNoaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuXG4gICAgaWYgKCFlcnIgJiYgb3B0aW9ucy50YWdzKSBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICdyZW1vdGUtdGFncy11cGRhdGUnLCB0YWdzOiByZXN1bHRbMF0gfSk7XG4gIH0pO1xufVxuXG5SZW1vdGVzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVSZW1vdGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIuZ2V0KCcvcmVtb3RlcycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0sIGZ1bmN0aW9uKGVyciwgcmVtb3Rlcykge1xuICAgIGlmIChlcnIgJiYgZXJyLmVycm9yQ29kZSA9PSAnbm90LWEtcmVwb3NpdG9yeScpIHJldHVybiB0cnVlO1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICByZW1vdGVzID0gcmVtb3Rlcy5tYXAoZnVuY3Rpb24ocmVtb3RlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiByZW1vdGUsXG4gICAgICAgIGNoYW5nZVJlbW90ZTogZnVuY3Rpb24oKSB7IHNlbGYuY3VycmVudFJlbW90ZShyZW1vdGUpIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLnJlbW90ZXMocmVtb3Rlcyk7XG4gICAgaWYgKCFzZWxmLmN1cnJlbnRSZW1vdGUoKSAmJiByZW1vdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChfLmZpbmQocmVtb3RlcywgeyAnbmFtZSc6ICdvcmlnaW4nIH0pKSAvLyBkZWZhdWx0IHRvIG9yaWdpbiBpZiBpdCBleGlzdHNcbiAgICAgICAgc2VsZi5jdXJyZW50UmVtb3RlKCdvcmlnaW4nKTtcbiAgICAgIGVsc2UgLy8gb3RoZXJ3aXNlIHRha2UgdGhlIGZpcnN0IG9uZVxuICAgICAgICBzZWxmLmN1cnJlbnRSZW1vdGUocmVtb3Rlc1swXS5uYW1lKTtcbiAgICAgIGlmIChzZWxmLnNob3VsZEF1dG9GZXRjaCkge1xuICAgICAgICBzZWxmLmZldGNoKHsgbm9kZXM6IHRydWUsIHRhZ3M6IHRydWUgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuc2hvdWxkQXV0b0ZldGNoID0gZmFsc2U7XG4gIH0pO1xufVxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd0FkZFJlbW90ZURpYWxvZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBkaWFnID0gY29tcG9uZW50cy5jcmVhdGUoJ2FkZHJlbW90ZWRpYWxvZycpO1xuICBkaWFnLmNsb3NlZC5hZGQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGRpYWcuaXNTdWJtaXR0ZWQoKSkge1xuICAgICAgc2VsZi5zZXJ2ZXIucG9zdCgnL3JlbW90ZXMvJyArIGVuY29kZVVSSUNvbXBvbmVudChkaWFnLm5hbWUoKSksIHsgcGF0aDogc2VsZi5yZXBvUGF0aCgpLCB1cmw6IGRpYWcudXJsKCkgfSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuO1xuICAgICAgICBzZWxmLnVwZGF0ZVJlbW90ZXMoKTtcbiAgICAgIH0pXG4gICAgfVxuICB9KTtcbiAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAncmVxdWVzdC1zaG93LWRpYWxvZycsIGRpYWxvZzogZGlhZyB9KTtcbn1cblxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUucmVtb3RlUmVtb3ZlID0gZnVuY3Rpb24ocmVtb3RlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGRpYWcgPSBjb21wb25lbnRzLmNyZWF0ZSgneWVzbm9kaWFsb2cnLCB7IHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsIGRldGFpbHM6ICdEZWxldGluZyAnICsgcmVtb3RlLm5hbWUgKyAnIHJlbW90ZSBjYW5ub3QgYmUgdW5kb25lIHdpdGggdW5naXQuJ30pO1xuICBkaWFnLmNsb3NlZC5hZGQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGRpYWcucmVzdWx0KCkpIHtcbiAgICAgIHNlbGYuZmV0Y2hpbmdQcm9ncmVzc0Jhci5zdGFydCgpO1xuICAgICAgc2VsZi5zZXJ2ZXIuZGVsKCcvcmVtb3Rlcy8nICsgcmVtb3RlLm5hbWUsIHsgcGF0aDogc2VsZi5yZXBvUGF0aCgpIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYudXBkYXRlUmVtb3RlcygpO1xuICAgICAgICBzZWxmLmZldGNoaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAncmVxdWVzdC1zaG93LWRpYWxvZycsIGRpYWxvZzogZGlhZyB9KTtcbn1cbiJdfQ==
